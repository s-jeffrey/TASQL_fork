{
    "0": "SELECT      (COUNT(CASE WHEN Currency = 'EUR' THEN 1 END) * 1.0) /      COUNT(CASE WHEN Currency = 'CZK' THEN 1 END) AS ratio FROM      customers;\t----- bird -----\tdebit_card_specializing",
    "1": "SELECT ym.CustomerID FROM yearmonth ym INNER JOIN customers c ON ym.CustomerID = c.CustomerID WHERE c.Segment = 'LAM' AND ym.Date BETWEEN '201201' AND '201212' ORDER BY ym.Consumption ASC LIMIT 1;\t----- bird -----\tdebit_card_specializing",
    "2": "SELECT AVG(yearmonth.Consumption) / 12 AS Average_Monthly_Consumption FROM yearmonth INNER JOIN customers ON yearmonth.CustomerID = customers.CustomerID WHERE customers.Segment = 'SME' AND yearmonth.Date BETWEEN '201301' AND '201312';\t----- bird -----\tdebit_card_specializing",
    "3": "SELECT      (SUM(CASE WHEN customers.Currency = 'CZK' THEN yearmonth.Consumption ELSE 0 END) -       SUM(CASE WHEN customers.Currency = 'EUR' THEN yearmonth.Consumption ELSE 0 END)) AS ConsumptionDifference FROM      yearmonth INNER JOIN      customers ON yearmonth.CustomerID = customers.CustomerID WHERE      yearmonth.Date BETWEEN '201201' AND '201212';\t----- bird -----\tdebit_card_specializing",
    "4": "SELECT SUBSTR(yearmonth.Date, 1, 4) AS Year FROM yearmonth JOIN customers ON yearmonth.CustomerID = customers.CustomerID WHERE customers.Currency = 'CZK' GROUP BY Year ORDER BY SUM(yearmonth.Consumption) DESC LIMIT 1;\t----- bird -----\tdebit_card_specializing",
    "5": "SELECT yearmonth.Date FROM yearmonth INNER JOIN customers ON yearmonth.CustomerID = customers.CustomerID WHERE customers.Segment = 'SME'   AND yearmonth.Date BETWEEN '201301' AND '201312' ORDER BY yearmonth.Consumption DESC LIMIT 1;\t----- bird -----\tdebit_card_specializing",
    "6": "SELECT      (sme_avg - lam_avg) AS sme_lam_diff,     (lam_avg - kam_avg) AS lam_kam_diff,     (kam_avg - sme_avg) AS kam_sme_diff FROM (     SELECT          (SELECT AVG(consumption_sum)           FROM (              SELECT SUM(y.Consumption) AS consumption_sum              FROM yearmonth y              INNER JOIN customers c ON y.CustomerID = c.CustomerID              WHERE c.Currency = 'CZK'                 AND y.Date BETWEEN '201301' AND '201312'                AND c.Segment = 'SME'              GROUP BY y.CustomerID              ORDER BY consumption_sum              LIMIT 1          )) AS sme_avg,                   (SELECT AVG(consumption_sum)           FROM (              SELECT SUM(y.Consumption) AS consumption_sum              FROM yearmonth y              INNER JOIN customers c ON y.CustomerID = c.CustomerID              WHERE c.Currency = 'CZK'                 AND y.Date BETWEEN '201301' AND '201312'                AND c.Segment = 'LAM'              GROUP BY y.CustomerID              ORDER BY consumption_sum              LIMIT 1          )) AS lam_avg,                   (SELECT AVG(consumption_sum)           FROM (              SELECT SUM(y.Consumption) AS consumption_sum              FROM yearmonth y              INNER JOIN customers c ON y.CustomerID = c.CustomerID              WHERE c.Currency = 'CZK'                 AND y.Date BETWEEN '201301' AND '201312'                AND c.Segment = 'KAM'              GROUP BY y.CustomerID              ORDER BY consumption_sum              LIMIT 1          )) AS kam_avg ) AS subquery;\t----- bird -----\tdebit_card_specializing",
    "7": "SELECT max_increase_segment.Segment AS Max_Increase_Segment, min_increase_segment.Segment AS Min_Increase_Segment FROM (     SELECT Segment,             ((SUM(CASE WHEN SUBSTR(Date, 1, 4) = '2013' THEN Consumption ELSE 0 END) -               SUM(CASE WHEN SUBSTR(Date, 1, 4) = '2012' THEN Consumption ELSE 0 END)) /               SUM(CASE WHEN SUBSTR(Date, 1, 4) = '2012' THEN Consumption ELSE 0 END) * 100) AS Percentage_Increase     FROM yearmonth     INNER JOIN customers ON yearmonth.CustomerID = customers.CustomerID     WHERE customers.Currency = 'EUR' AND customers.Segment IN ('SME', 'LAM', 'KAM')     GROUP BY customers.Segment ) AS percentage_increase ORDER BY Percentage_Increase DESC LIMIT 1 ) AS max_increase_segment CROSS JOIN (     SELECT Segment     FROM (         SELECT Segment,                 ((SUM(CASE WHEN SUBSTR(Date, 1, 4) = '2013' THEN Consumption ELSE 0 END) -                   SUM(CASE WHEN SUBSTR(Date, 1, 4) = '2012' THEN Consumption ELSE 0 END)) /                   SUM(CASE WHEN SUBSTR(Date, 1, 4) = '2012' THEN Consumption ELSE 0 END) * 100) AS Percentage_Increase         FROM yearmonth         INNER JOIN customers ON yearmonth.CustomerID = customers.CustomerID         WHERE customers.Currency = 'EUR' AND customers.Segment IN ('SME', 'LAM', 'KAM')         GROUP BY customers.Segment     ) AS percentage_increase     ORDER BY Percentage_Increase ASC     LIMIT 1 ) AS min_increase_segment;\t----- bird -----\tdebit_card_specializing",
    "8": "SELECT SUM(Consumption)  FROM yearmonth  WHERE CustomerID = 6  AND Date >= '201308'  AND Date <= '201311';\t----- bird -----\tdebit_card_specializing",
    "9": "SELECT      (SELECT COUNT(*)       FROM gasstations       WHERE Country = 'CZE' AND Segment = 'Discount')      -      (SELECT COUNT(*)       FROM gasstations       WHERE Country = 'SVK' AND Segment = 'Discount') AS difference\t----- bird -----\tdebit_card_specializing",
    "10": "SELECT      (COUNT(CASE WHEN customers.Currency = 'CZK' THEN 1 END) -       COUNT(CASE WHEN customers.Currency = 'EUR' THEN 1 END)) AS difference FROM      customers WHERE      customers.Segment = 'SME';\t----- bird -----\tdebit_card_specializing",
    "11": "SELECT      CAST(COUNT(DISTINCT ym.CustomerID) AS REAL) * 100 / COUNT(DISTINCT c.CustomerID) AS percentage FROM      customers c INNER JOIN      yearmonth ym ON c.CustomerID = ym.CustomerID WHERE      c.Segment = 'LAM'     AND ym.Consumption > 46.73;\t----- bird -----\tdebit_card_specializing",
    "12": "SELECT CAST(COUNT(*) AS REAL) * 100 / (SELECT COUNT(*) FROM yearmonth WHERE SUBSTR(Date, 1, 6) = '201202') FROM yearmonth WHERE SUBSTR(Date, 1, 6) = '201202' AND Consumption > 528.3;\t----- bird -----\tdebit_card_specializing",
    "13": "SELECT MAX(Consumption)  FROM yearmonth  WHERE Date LIKE '2012%'\t----- bird -----\tdebit_card_specializing",
    "14": "SELECT DISTINCT products.Description FROM products INNER JOIN transactions_1k ON products.ProductID = transactions_1k.ProductID INNER JOIN yearmonth ON transactions_1k.CustomerID = yearmonth.CustomerID WHERE yearmonth.Date = '201309';\t----- bird -----\tdebit_card_specializing",
    "15": "SELECT DISTINCT gasstations.Country FROM gasstations INNER JOIN transactions_1k ON gasstations.GasStationID = transactions_1k.GasStationID INNER JOIN yearmonth ON transactions_1k.CustomerID = yearmonth.CustomerID WHERE yearmonth.Date = '201306';\t----- bird -----\tdebit_card_specializing",
    "16": "SELECT COUNT(DISTINCT customers.CustomerID) FROM customers INNER JOIN yearmonth ON customers.CustomerID = yearmonth.CustomerID WHERE customers.Currency = 'EUR' AND yearmonth.Consumption > 1000;\t----- bird -----\tdebit_card_specializing",
    "17": "SELECT DISTINCT products.Description FROM gasstations INNER JOIN transactions_1k ON gasstations.GasStationID = transactions_1k.GasStationID INNER JOIN products ON transactions_1k.ProductID = products.ProductID WHERE gasstations.Country = 'CZE';\t----- bird -----\tdebit_card_specializing",
    "18": "SELECT DISTINCT transactions_1k.Time FROM gasstations INNER JOIN transactions_1k ON gasstations.GasStationID = transactions_1k.GasStationID WHERE gasstations.ChainID = 11;\t----- bird -----\tdebit_card_specializing",
    "19": "SELECT COUNT(*) FROM transactions_1k INNER JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID WHERE gasstations.Country = 'CZE' AND transactions_1k.Date > '2012-01-01'\t----- bird -----\tdebit_card_specializing",
    "20": "SELECT customers.Currency FROM transactions_1k INNER JOIN customers ON transactions_1k.CustomerID = customers.CustomerID WHERE transactions_1k.Date = '2012-08-24' AND transactions_1k.Time = '16:25:00';\t----- bird -----\tdebit_card_specializing",
    "21": "SELECT customers.Segment FROM customers INNER JOIN transactions_1k ON customers.CustomerID = transactions_1k.CustomerID WHERE transactions_1k.Date = '2012-08-23' AND transactions_1k.Time = '21:20:00'\t----- bird -----\tdebit_card_specializing",
    "22": "SELECT COUNT(*) FROM transactions_1k INNER JOIN gasstations ON transactions_1k.GasStationID = gasstations.GasStationID WHERE transactions_1k.Date = '2012-08-26'   AND transactions_1k.Time BETWEEN '08:00:00' AND '09:00:00'   AND gasstations.Country = 'CZE';\t----- bird -----\tdebit_card_specializing",
    "23": "SELECT customers.Nationality FROM yearmonth INNER JOIN customers ON yearmonth.CustomerID = customers.CustomerID WHERE yearmonth.Date = '2012-08-24' AND yearmonth.Consumption = 548.4;\t----- bird -----\tdebit_card_specializing",
    "24": "SELECT CAST(COUNT(DISTINCT t1.CustomerID) AS REAL) * 100 / COUNT(DISTINCT t2.CustomerID) AS percentage FROM customers t1 INNER JOIN transactions_1k t2 ON t1.CustomerID = t2.CustomerID WHERE t1.Currency = 'EUR' AND t2.Date = '2012-08-25';\t----- bird -----\tdebit_card_specializing",
    "25": "SELECT      (consumption_2012 - consumption_2013) / consumption_2012 AS consumption_decrease_rate FROM (     SELECT          SUM(CASE WHEN yearmonth.Date LIKE '2012%' THEN yearmonth.Consumption ELSE 0 END) AS consumption_2012,         SUM(CASE WHEN yearmonth.Date LIKE '2013%' THEN yearmonth.Consumption ELSE 0 END) AS consumption_2013     FROM yearmonth     WHERE yearmonth.CustomerID = (         SELECT transactions_1k.CustomerID         FROM transactions_1k         WHERE transactions_1k.Amount = 634.8 AND transactions_1k.Date = '2012-08-25'     ) ) AS consumption_data;\t----- bird -----\tdebit_card_specializing",
    "26": "SELECT CAST(COUNT(*) AS REAL) * 100 / (SELECT COUNT(*) FROM gasstations WHERE Country = 'SVK') AS percentage FROM gasstations WHERE Country = 'SVK' AND Segment = 'Premium';\t----- bird -----\tdebit_card_specializing",
    "27": "SELECT SUM(Amount)  FROM transactions_1k  WHERE CustomerID = 38508  AND strftime('%Y%m', Date) = '201201';\t----- bird -----\tdebit_card_specializing",
    "28": "SELECT      t.CustomerID,      SUM(t.Price) / SUM(t.Amount) AS avg_price,      c.Currency FROM      transactions_1k t INNER JOIN      customers c ON t.CustomerID = c.CustomerID GROUP BY      t.CustomerID, c.Currency ORDER BY      SUM(t.Price) DESC LIMIT 1;\t----- bird -----\tdebit_card_specializing",
    "29": "SELECT ym.Consumption FROM transactions_1k t INNER JOIN yearmonth ym ON t.CustomerID = ym.CustomerID WHERE t.ProductID = 5   AND (t.Price / t.Amount) > 29.00   AND t.Date BETWEEN '2012-08-01' AND '2012-08-31'   AND ym.Date = '201208';\t----- bird -----\tdebit_card_specializing",
    "30": "SELECT major.major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Angela' AND member.last_name = 'Sanders';\t----- bird -----\tstudent_club",
    "31": "SELECT COUNT(*) FROM attendance INNER JOIN event ON attendance.link_to_event = event.event_id INNER JOIN member ON attendance.link_to_member = member.member_id WHERE event.event_name = 'Women's Soccer' AND member.t_shirt_size = 'Medium';\t----- bird -----\tstudent_club",
    "32": "SELECT COUNT(*)  FROM event  INNER JOIN attendance ON event.event_id = attendance.link_to_event  WHERE event.type = 'Meeting'  GROUP BY attendance.link_to_event  HAVING COUNT(attendance.link_to_member) > 10;\t----- bird -----\tstudent_club",
    "33": "SELECT event.event_name FROM event INNER JOIN attendance ON event.event_id = attendance.link_to_event GROUP BY event.event_id HAVING COUNT(attendance.link_to_member) > 20 AND event.type != 'Fundraiser';\t----- bird -----\tstudent_club",
    "34": "SELECT income.amount FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE member.position = 'Vice President';\t----- bird -----\tstudent_club",
    "35": "SELECT CONCAT(member.first_name, ' ', member.last_name) AS full_name FROM member INNER JOIN zip_code ON member.zip = zip_code.zip_code WHERE zip_code.state = 'Illinois';\t----- bird -----\tstudent_club",
    "36": "SELECT e.expense_id, e.approved FROM expense e INNER JOIN budget b ON e.link_to_budget = b.budget_id INNER JOIN event ev ON b.link_to_event = ev.event_id WHERE ev.event_name = 'October Meeting'  AND ev.event_date = '2019-10-08';\t----- bird -----\tstudent_club",
    "37": "SELECT AVG(expense.cost) AS total_average_cost FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE member.first_name = 'Elijah'   AND member.last_name = 'Allen'   AND (strftime('%m', expense.expense_date) = '09' OR strftime('%m', expense.expense_date) = '10');\t----- bird -----\tstudent_club",
    "38": "SELECT      (SUM(CASE WHEN SUBSTR(event.event_date, 1, 4) = '2019' THEN budget.spent ELSE 0 END) -       SUM(CASE WHEN SUBSTR(event.event_date, 1, 4) = '2020' THEN budget.spent ELSE 0 END)) AS difference FROM      budget INNER JOIN      event ON budget.link_to_event = event.event_id;\t----- bird -----\tstudent_club",
    "39": "SELECT income.notes FROM income WHERE income.source = 'Fundraising' AND income.date_received = '2019-09-14';\t----- bird -----\tstudent_club",
    "40": "SELECT member.phone FROM member WHERE member.first_name = 'Carlo' AND member.last_name = 'Jacobs';\t----- bird -----\tstudent_club",
    "41": "SELECT budget.event_status FROM expense INNER JOIN budget ON expense.link_to_budget = budget.budget_id WHERE expense.expense_description = 'Post Cards, Posters'   AND expense.expense_date = '2019-08-20';\t----- bird -----\tstudent_club",
    "42": "SELECT major.major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.first_name = 'Brent' AND member.last_name = 'Thomason';\t----- bird -----\tstudent_club",
    "43": "SELECT COUNT(*) FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Business' AND member.t_shirt_size = 'Medium';\t----- bird -----\tstudent_club",
    "44": "SELECT major.department FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.position = 'President';\t----- bird -----\tstudent_club",
    "45": "SELECT income.date_received FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE member.first_name = 'Connor'   AND member.last_name = 'Hilton'   AND income.source = 'Dues';\t----- bird -----\tstudent_club",
    "46": "SELECT      SUM(CASE WHEN event.event_name = 'Yearly Kickoff' THEN budget.amount ELSE 0 END) /      SUM(CASE WHEN event.event_name = 'October Meeting' THEN budget.amount ELSE 0 END) AS times_more FROM      budget INNER JOIN      event ON budget.link_to_event = event.event_id WHERE      budget.category = 'Advertisement';\t----- bird -----\tstudent_club",
    "47": "SELECT SUM(expense.cost) AS total_pizza_cost FROM expense WHERE expense.expense_description = 'Pizza';\t----- bird -----\tstudent_club",
    "48": "SELECT COUNT(DISTINCT city) FROM zip_code WHERE county = 'Orange County' AND state = 'Virginia';\t----- bird -----\tstudent_club",
    "49": "SELECT major.major_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE member.phone = '809-555-3360';\t----- bird -----\tstudent_club",
    "50": "SELECT COUNT(DISTINCT attendance.link_to_member) FROM attendance INNER JOIN event ON attendance.link_to_event = event.event_id WHERE event.event_name = 'Women's Soccer';\t----- bird -----\tstudent_club",
    "51": "SELECT member.first_name, member.last_name FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.department = 'School of Applied Sciences, Technology and Education';\t----- bird -----\tstudent_club",
    "52": "SELECT e.event_name FROM event e INNER JOIN budget b ON e.event_id = b.link_to_event WHERE e.status = 'Closed' ORDER BY (b.spent / b.amount) DESC LIMIT 1;\t----- bird -----\tstudent_club",
    "53": "SELECT MAX(spent) AS highest_spent FROM budget;\t----- bird -----\tstudent_club",
    "54": "SELECT SUM(spent)  FROM budget  WHERE category = 'Food';\t----- bird -----\tstudent_club",
    "55": "SELECT CONCAT(member.first_name, ' ', member.last_name) AS full_name FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id GROUP BY attendance.link_to_member HAVING COUNT(attendance.link_to_event) > 7;\t----- bird -----\tstudent_club",
    "56": "SELECT member.first_name, member.last_name FROM event INNER JOIN budget ON budget.link_to_event = event.event_id INNER JOIN member ON member.member_id = budget.link_to_event WHERE event.event_name = 'Yearly Kickoff'\t----- bird -----\tstudent_club",
    "57": "SELECT event.event_name FROM event INNER JOIN expense ON event.event_id = expense.link_to_event ORDER BY expense.cost ASC LIMIT 1\t----- bird -----\tstudent_club",
    "58": "SELECT      (SUM(e.cost) FILTER (WHERE ev.event_name = 'Yearly Kickoff') * 100.0 / SUM(e.cost)) AS percentage FROM      expense e INNER JOIN      budget b ON e.link_to_budget = b.budget_id INNER JOIN      event ev ON b.link_to_event = ev.event_id;\t----- bird -----\tstudent_club",
    "59": "SELECT income.source FROM income WHERE income.date_received BETWEEN '2019-09-01' AND '2019-09-30' GROUP BY income.source ORDER BY SUM(income.amount) DESC LIMIT 1;\t----- bird -----\tstudent_club",
    "60": "SELECT COUNT(*) FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Physics Teaching';\t----- bird -----\tstudent_club",
    "61": "SELECT event.event_name FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE budget.category = 'Advertisement' ORDER BY budget.spent DESC LIMIT 1;\t----- bird -----\tstudent_club",
    "62": "SELECT COUNT(*) > 0 AS attended FROM attendance INNER JOIN member ON attendance.link_to_member = member.member_id INNER JOIN event ON attendance.link_to_event = event.event_id WHERE member.first_name = 'Maya'   AND member.last_name = 'Mclean'   AND event.event_name = 'Women's Soccer';\t----- bird -----\tstudent_club",
    "63": "SELECT expense.cost FROM event INNER JOIN expense ON event.event_id = expense.link_to_event WHERE event.event_name = 'September Speaker' AND expense.expense_description = 'Posters'\t----- bird -----\tstudent_club",
    "64": "SELECT e.event_name FROM event e INNER JOIN budget b ON e.event_id = b.link_to_event WHERE e.status = 'Closed' AND b.remaining < 0 ORDER BY b.remaining ASC LIMIT 1;\t----- bird -----\tstudent_club",
    "65": "SELECT expense.expense_description, SUM(expense.cost)  FROM event  INNER JOIN expense ON event.event_id = expense.link_to_event  WHERE event.event_name = 'October Meeting' AND expense.approved = 'true'  GROUP BY expense.expense_description;\t----- bird -----\tstudent_club",
    "66": "SELECT b.category, SUM(b.amount) AS total_amount FROM budget b INNER JOIN event e ON b.link_to_event = e.event_id WHERE e.event_name = 'April Speaker' GROUP BY b.category ORDER BY total_amount ASC;\t----- bird -----\tstudent_club",
    "67": "SELECT SUM(expense.cost)  FROM expense  WHERE expense.expense_date = '2019-08-20';\t----- bird -----\tstudent_club",
    "68": "SELECT      member.first_name || ' ' || member.last_name AS full_name,      SUM(expense.cost) AS total_cost FROM      member INNER JOIN      expense ON member.member_id = expense.link_to_member WHERE      member.member_id = 'rec4BLdZHS2Blfp4v' GROUP BY      member.first_name, member.last_name;\t----- bird -----\tstudent_club",
    "69": "SELECT DISTINCT expense.expense_description FROM member INNER JOIN expense ON expense.link_to_member = member.member_id WHERE member.first_name = 'Sacha' AND member.last_name = 'Harrison';\t----- bird -----\tstudent_club",
    "70": "SELECT DISTINCT type FROM event WHERE location = 'MU 215';\t----- bird -----\tstudent_club",
    "71": "To convert the given SR (Structured Representation) into an executable SQL query, we need to follow the logic described in the SR and ensure it aligns with the schema and question requirements. The SR indicates filtering the data based on the major name Environmental Engineering and then selecting specific columns. Here's how the SQL query should be constructed:  1. **Filter**: We need to filter the records where the `major_name` is Environmental Engineering. 2. **Select**: We need to select the `last_name` of members, along with the `department` and `college` associated with the major.  Given the schema and foreign key relationships, we need to join the `member` and `major` tables using the `link_to_major` and `major_id` columns.  Here's the SQL query:   SELECT member.last_name, major.department, major.college FROM member INNER JOIN major ON member.link_to_major = major.major_id WHERE major.major_name = 'Environmental Engineering';   This query will list the last names of members who have a major in Environmental Engineering, along with the department and college name associated with that major.\t----- bird -----\tstudent_club",
    "72": "SELECT DISTINCT budget.category FROM budget INNER JOIN event ON budget.link_to_event = event.event_id WHERE event.location = 'MU 215'   AND event.type = 'Guest Speaker'   AND budget.spent = 0;\t----- bird -----\tstudent_club",
    "73": "SELECT (CAST(COUNT(CASE WHEN income.amount = 50 THEN 1 END) AS REAL) * 100 / COUNT(member.member_id)) AS percentage FROM member INNER JOIN income ON member.member_id = income.link_to_member WHERE member.t_shirt_size = 'Medium' AND member.position = 'Member';\t----- bird -----\tstudent_club",
    "74": "SELECT event_name FROM event WHERE type = 'Game'   AND status = 'Closed'   AND event_date BETWEEN '2019-03-15' AND '2020-03-20';\t----- bird -----\tstudent_club",
    "75": "SELECT CONCAT(m.first_name, ' ', m.last_name) AS full_name, m.phone FROM expense e INNER JOIN member m ON e.link_to_member = m.member_id GROUP BY e.expense_id, m.member_id HAVING e.cost > AVG(e.cost)\t----- bird -----\tstudent_club",
    "76": "SELECT member.first_name || ' ' || member.last_name AS full_name, expense.cost FROM expense INNER JOIN member ON expense.link_to_member = member.member_id WHERE expense.expense_description = 'Water, Veggie tray, supplies';\t----- bird -----\tstudent_club",
    "77": "SELECT CONCAT(member.first_name, ' ', member.last_name) AS full_name, income.amount FROM income INNER JOIN member ON income.link_to_member = member.member_id WHERE income.date_received = '2019-09-09';\t----- bird -----\tstudent_club",
    "78": "SELECT      ((COUNT(CASE WHEN Admission = '+' THEN ID END) - COUNT(CASE WHEN Admission = '-' THEN ID END)) * 100.0 / COUNT(CASE WHEN Admission = '-' THEN ID END)) AS percentage_deviation FROM      Patient WHERE      SEX = 'M';\t----- bird -----\tthrombosis_prediction",
    "79": "SELECT CAST(COUNT(CASE WHEN strftime('%Y', Birthday) > '1930' THEN ID END) AS REAL) * 100.0 / COUNT(ID) AS percentage FROM Patient WHERE SEX = 'F';\t----- bird -----\tthrombosis_prediction",
    "80": "SELECT CAST(     (SELECT COUNT(ID)       FROM Patient       WHERE Diagnosis = 'SLE' AND Admission = '+') AS REAL)      /      (SELECT COUNT(ID)       FROM Patient       WHERE Diagnosis = 'SLE' AND Admission = '-') AS ratio;\t----- bird -----\tthrombosis_prediction",
    "81": "SELECT Patient.Diagnosis, Laboratory.Date FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.ID = 30609;\t----- bird -----\tthrombosis_prediction",
    "82": "SELECT Patient.ID, Patient.SEX, Patient.Birthday FROM Laboratory INNER JOIN Patient ON Laboratory.ID = Patient.ID WHERE Laboratory.LDH > 500;\t----- bird -----\tthrombosis_prediction",
    "83": "SELECT Patient.ID,         (YEAR(CURDATE()) - YEAR(Patient.Birthday)) AS age FROM Examination INNER JOIN Patient ON Examination.ID = Patient.ID WHERE Examination.RVVT = '+';\t----- bird -----\tthrombosis_prediction",
    "84": "SELECT Patient.ID, Patient.SEX, Examination.Diagnosis FROM Examination INNER JOIN Patient ON Examination.ID = Patient.ID WHERE Examination.Thrombosis = 2;\t----- bird -----\tthrombosis_prediction",
    "85": "SELECT COUNT(*) FROM Patient WHERE SEX = 'F'   AND YEAR(`First Date`) = 1997   AND Admission = '-'\t----- bird -----\tthrombosis_prediction",
    "86": "SELECT COUNT(*) FROM Examination INNER JOIN Patient ON Examination.ID = Patient.ID WHERE Examination.Thrombosis = 1   AND strftime('%Y', Examination.`Examination Date`) = '1997'   AND Patient.SEX = 'F';\t----- bird -----\tthrombosis_prediction",
    "87": "SELECT Examination.Symptoms, Examination.Diagnosis FROM Examination INNER JOIN Patient ON Examination.ID = Patient.ID WHERE Examination.Symptoms IS NOT NULL ORDER BY Patient.Birthday DESC LIMIT 1;\t----- bird -----\tthrombosis_prediction",
    "88": "SELECT      Laboratory.Date,      (strftime('%Y', Patient.`First Date`) - strftime('%Y', Patient.Birthday)) AS AgeAtFirstVisit FROM      Patient INNER JOIN      Laboratory ON Patient.ID = Laboratory.ID WHERE      Patient.Diagnosis LIKE '%SJS%' ORDER BY      Patient.Birthday ASC LIMIT 1;\t----- bird -----\tthrombosis_prediction",
    "89": "SELECT      CAST(SUM(CASE WHEN Laboratory.UA <= 8.0 AND Patient.SEX = 'M' THEN 1 ELSE 0 END) AS REAL) /     CAST(SUM(CASE WHEN Laboratory.UA <= 6.5 AND Patient.SEX = 'F' THEN 1 ELSE 0 END) AS REAL) AS male_to_female_ratio FROM      Laboratory INNER JOIN      Patient ON Laboratory.ID = Patient.ID WHERE      (Laboratory.UA <= 8.0 AND Patient.SEX = 'M') OR      (Laboratory.UA <= 6.5 AND Patient.SEX = 'F');\t----- bird -----\tthrombosis_prediction",
    "90": "SELECT COUNT(DISTINCT Examination.ID)  FROM Examination  INNER JOIN Patient ON Examination.ID = Patient.ID  WHERE (YEAR(Examination.`Examination Date`) BETWEEN 1990 AND 1993)  AND (YEAR(Examination.`Examination Date`) - YEAR(Patient.Birthday) < 18);\t----- bird -----\tthrombosis_prediction",
    "91": "SELECT      strftime('%Y', Examination.`Examination Date`) - strftime('%Y', Patient.Birthday) AS Age,     Examination.Diagnosis FROM      Laboratory INNER JOIN      Examination ON Laboratory.ID = Examination.ID INNER JOIN      Patient ON Laboratory.ID = Patient.ID ORDER BY      Laboratory.HGB DESC LIMIT 1;\t----- bird -----\tthrombosis_prediction",
    "92": "SELECT Examination.`aCL IgM` FROM Patient INNER JOIN Examination ON Patient.ID = Examination.ID WHERE Patient.Diagnosis = 'SLE'   AND Patient.Description = '1994-02-19'   AND Examination.`Examination Date` = '1993-11-12';\t----- bird -----\tthrombosis_prediction",
    "93": "SELECT      (SUM(CASE WHEN Laboratory.Date LIKE '1981-11-%' THEN Laboratory.T-CHO ELSE 0 END) -       SUM(CASE WHEN Laboratory.Date LIKE '1981-12-%' THEN Laboratory.T-CHO ELSE 0 END)) /      SUM(CASE WHEN Laboratory.Date LIKE '1981-12-%' THEN Laboratory.T-CHO ELSE 0 END) AS decrease_rate FROM      Laboratory INNER JOIN      Patient ON Laboratory.ID = Patient.ID WHERE      Patient.Birthday = '1959-02-18';\t----- bird -----\tthrombosis_prediction",
    "94": "SELECT DISTINCT Laboratory.ID FROM Laboratory WHERE Laboratory.Date BETWEEN '1987-07-06' AND '1996-01-31'   AND Laboratory.GPT > 30   AND Laboratory.ALB < 4;\t----- bird -----\tthrombosis_prediction",
    "95": "SELECT COUNT(*) FROM Examination WHERE Thrombosis = 2   AND `ANA Pattern` = 'S'   AND `aCL IgM` > (SELECT AVG(`aCL IgM`) * 1.2 FROM Examination);\t----- bird -----\tthrombosis_prediction",
    "96": "SELECT DISTINCT Patient.ID FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.Admission = '-'   AND Laboratory.Date LIKE '1991-10%'   AND Laboratory.T-BIL < 2.0;\t----- bird -----\tthrombosis_prediction",
    "97": "SELECT AVG(Laboratory.ALB) FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.SEX = 'F'   AND Laboratory.PLT > 400   AND Patient.Diagnosis = 'SLE';\t----- bird -----\tthrombosis_prediction",
    "98": "SELECT COUNT(*) FROM Patient WHERE SEX = 'F' AND Diagnosis = 'APS';\t----- bird -----\tthrombosis_prediction",
    "99": "SELECT (COUNT(CASE WHEN SEX = 'F' THEN 1 END) * 100.0 / COUNT(*)) AS percentage FROM Patient WHERE YEAR(Birthday) = '1980' AND Diagnosis = 'RA';\t----- bird -----\tthrombosis_prediction",
    "100": "SELECT COUNT(*) > 0 AS is_within_normal_range FROM Laboratory INNER JOIN Patient ON Laboratory.ID = Patient.ID WHERE Laboratory.ID = 57266 AND (     (Laboratory.UA > 8.0 AND Patient.SEX = 'M')     OR (Laboratory.UA > 6.5 AND Patient.SEX = 'F') );\t----- bird -----\tthrombosis_prediction",
    "101": "SELECT DISTINCT Patient.ID FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.SEX = 'M' AND Laboratory.GPT >= 60;\t----- bird -----\tthrombosis_prediction",
    "102": "SELECT Patient.Diagnosis FROM Laboratory INNER JOIN Patient ON Laboratory.ID = Patient.ID WHERE Laboratory.GPT > 60 ORDER BY Patient.Birthday ASC;\t----- bird -----\tthrombosis_prediction",
    "103": "SELECT Patient.ID, Patient.SEX, Patient.Birthday FROM Laboratory INNER JOIN Patient ON Laboratory.ID = Patient.ID WHERE Laboratory.UN = 29;\t----- bird -----\tthrombosis_prediction",
    "104": "SELECT Patient.SEX, GROUP_CONCAT(DISTINCT Laboratory.ID) AS patient_ids FROM Laboratory INNER JOIN Patient ON Laboratory.ID = Patient.ID WHERE Laboratory.`T-BIL` >= 2.0 GROUP BY Patient.SEX;\t----- bird -----\tthrombosis_prediction",
    "105": "SELECT AVG(YEAR(CURDATE()) - YEAR(Patient.Birthday)) AS average_age FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.SEX = 'M' AND Laboratory.T-CHO >= 250;\t----- bird -----\tthrombosis_prediction",
    "106": "SELECT COUNT(DISTINCT Patient.ID)  FROM Laboratory  INNER JOIN Patient ON Laboratory.ID = Patient.ID  WHERE Laboratory.TG >= 200  AND (strftime('%Y', 'now') - strftime('%Y', Patient.Birthday)) > 50;\t----- bird -----\tthrombosis_prediction",
    "107": "SELECT COUNT(DISTINCT Patient.ID) FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE YEAR(Patient.Birthday) BETWEEN 1936 AND 1956   AND Patient.SEX = 'M'   AND Laboratory.CPK >= 250;\t----- bird -----\tthrombosis_prediction",
    "108": "SELECT      Patient.ID,      Patient.SEX,      (strftime('%Y', 'now') - strftime('%Y', Patient.Birthday)) AS age FROM      Patient INNER JOIN      Laboratory ON Patient.ID = Laboratory.ID WHERE      Laboratory.GLU >= 180      AND Laboratory.T-CHO < 250;\t----- bird -----\tthrombosis_prediction",
    "109": "SELECT Patient.ID, Patient.Diagnosis, (strftime('%Y', 'now') - strftime('%Y', Patient.Birthday)) AS age FROM Laboratory INNER JOIN Patient ON Laboratory.ID = Patient.ID WHERE Laboratory.RBC < 3.5;\t----- bird -----\tthrombosis_prediction",
    "110": "SELECT Patient.ID, Patient.SEX FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID WHERE Patient.Diagnosis = 'SLE' AND Laboratory.HGB > 10 AND Laboratory.HGB < 17 ORDER BY Patient.Birthday ASC LIMIT 1;\t----- bird -----\tthrombosis_prediction",
    "111": "SELECT Laboratory.ID,         (strftime('%Y', 'now') - strftime('%Y', Patient.Birthday)) AS age FROM Laboratory INNER JOIN Patient ON Laboratory.ID = Patient.ID WHERE Laboratory.HCT >= 52 GROUP BY Laboratory.ID HAVING COUNT(Laboratory.ID) > 2;\t----- bird -----\tthrombosis_prediction",
    "112": "SELECT      (SELECT COUNT(DISTINCT Laboratory.ID) FROM Laboratory WHERE PLT < 100) -      (SELECT COUNT(DISTINCT Laboratory.ID) FROM Laboratory WHERE PLT > 400) AS difference FROM Laboratory WHERE PLT <= 100 OR PLT >= 400;\t----- bird -----\tthrombosis_prediction",
    "113": "SELECT DISTINCT Patient.ID FROM Laboratory INNER JOIN Patient ON Laboratory.ID = Patient.ID WHERE YEAR(Laboratory.Date) = 1984   AND Laboratory.PLT BETWEEN 100 AND 400   AND (YEAR(CURDATE()) - YEAR(Patient.Birthday)) < 50;\t----- bird -----\tthrombosis_prediction",
    "114": "SELECT (CAST(SUM(CASE WHEN Patient.SEX = 'F' THEN 1 ELSE 0 END) AS REAL) * 100.0 / COUNT(*)) AS percentage FROM Laboratory INNER JOIN Patient ON Laboratory.ID = Patient.ID WHERE (strftime('%Y', 'now') - strftime('%Y', Patient.Birthday)) > 55 AND Laboratory.PT >= 14;\t----- bird -----\tthrombosis_prediction",
    "115": "SELECT COUNT(DISTINCT Laboratory.ID) FROM Laboratory INNER JOIN Patient ON Laboratory.ID = Patient.ID WHERE Patient.SEX = 'M'   AND Laboratory.WBC > 3.5   AND Laboratory.WBC < 9.0   AND (Laboratory.FG <= 150 OR Laboratory.FG >= 450);\t----- bird -----\tthrombosis_prediction",
    "116": "SELECT COUNT(DISTINCT Laboratory.ID) FROM Laboratory WHERE Laboratory.IGG >= 2000;\t----- bird -----\tthrombosis_prediction",
    "117": "SELECT COUNT(DISTINCT Examination.ID) FROM Laboratory INNER JOIN Examination ON Laboratory.ID = Examination.ID WHERE Laboratory.IGG > 900 AND Laboratory.IGG < 2000 AND Examination.Symptoms IS NOT NULL;\t----- bird -----\tthrombosis_prediction",
    "118": "SELECT COUNT(DISTINCT Patient.ID) FROM Laboratory INNER JOIN Patient ON Laboratory.ID = Patient.ID WHERE Laboratory.IGA > 80 AND Laboratory.IGA < 500 AND Patient.`First Date` > '1990-01-01';\t----- bird -----\tthrombosis_prediction",
    "119": "SELECT Patient.Diagnosis FROM Laboratory INNER JOIN Patient ON Laboratory.ID = Patient.ID WHERE Laboratory.IGM <= 40 OR Laboratory.IGM >= 400 GROUP BY Patient.Diagnosis ORDER BY COUNT(Patient.Diagnosis) DESC LIMIT 1;\t----- bird -----\tthrombosis_prediction",
    "120": "SELECT COUNT(DISTINCT Laboratory.ID) FROM Laboratory INNER JOIN Patient ON Laboratory.ID = Patient.ID WHERE Laboratory.CRP = '+' AND Patient.Description IS NULL;\t----- bird -----\tthrombosis_prediction",
    "121": "SELECT COUNT(*) FROM Laboratory INNER JOIN Patient ON Laboratory.ID = Patient.ID WHERE Laboratory.CRE >= 1.5 AND (YEAR(CURDATE()) - YEAR(Patient.Birthday)) < 70;\t----- bird -----\tthrombosis_prediction",
    "122": "SELECT COUNT(DISTINCT Patient.ID) FROM Laboratory INNER JOIN Patient ON Laboratory.ID = Patient.ID WHERE (Laboratory.RNP = 'negative' OR Laboratory.RNP = '0') AND Patient.Admission = '+';\t----- bird -----\tthrombosis_prediction",
    "123": "SELECT COUNT(*) FROM Laboratory INNER JOIN Examination ON Laboratory.ID = Examination.ID WHERE Laboratory.SM IN ('-', '+-') AND Examination.Thrombosis = 0;\t----- bird -----\tthrombosis_prediction",
    "124": "SELECT COUNT(DISTINCT Patient.ID) FROM Patient INNER JOIN Laboratory ON Patient.ID = Laboratory.ID LEFT JOIN Examination ON Patient.ID = Examination.ID WHERE Laboratory.SC170 IN ('negative', '0') AND Patient.SEX = 'F' AND Examination.Symptoms IS NULL;\t----- bird -----\tthrombosis_prediction",
    "125": "SELECT COUNT(DISTINCT Patient.ID) FROM Laboratory INNER JOIN Patient ON Laboratory.ID = Patient.ID WHERE Laboratory.CENTROMEA IN ('-', '+-')   AND Laboratory.SSB IN ('-', '+-')   AND Patient.SEX = 'M';\t----- bird -----\tthrombosis_prediction",
    "126": "SELECT Patient.Birthday FROM Laboratory INNER JOIN Patient ON Laboratory.ID = Patient.ID WHERE Laboratory.GOT >= 60 ORDER BY Patient.Birthday DESC LIMIT 1;\t----- bird -----\tthrombosis_prediction",
    "127": "SELECT COUNT(DISTINCT Examination.ID) FROM Examination INNER JOIN Laboratory ON Examination.ID = Laboratory.ID WHERE Laboratory.CPK < 250 AND (Examination.KCT = '+' OR Examination.RVVT = '+' OR Examination.LAC = '+')\t----- bird -----\tthrombosis_prediction",
    "128": "SELECT L.name FROM Match M INNER JOIN League L ON M.league_id = L.id WHERE M.season = '2015/2016' GROUP BY M.league_id ORDER BY SUM(M.home_team_goal + M.away_team_goal) DESC LIMIT 1;\t----- bird -----\teuropean_football_2",
    "129": "SELECT T.team_long_name FROM Match M INNER JOIN League L ON M.league_id = L.id INNER JOIN Team T ON M.away_team_api_id = T.team_api_id WHERE L.name = 'Scotland Premier League'   AND M.season = '2009/2010'   AND M.away_team_goal > M.home_team_goal GROUP BY M.away_team_api_id ORDER BY COUNT(*) DESC LIMIT 1;\t----- bird -----\teuropean_football_2",
    "130": "SELECT Team_Attributes.buildUpPlaySpeed FROM Team_Attributes ORDER BY Team_Attributes.buildUpPlaySpeed DESC LIMIT 4;\t----- bird -----\teuropean_football_2",
    "131": "SELECT L.name FROM Match M INNER JOIN League L ON M.league_id = L.id WHERE M.season = '2015/2016' AND M.home_team_goal = M.away_team_goal GROUP BY M.league_id ORDER BY COUNT(M.id) DESC LIMIT 1;\t----- bird -----\teuropean_football_2",
    "132": "SELECT (strftime('%Y', 'now') - strftime('%Y', Player.birthday)) AS age FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player_Attributes.sprint_speed >= 97 AND strftime('%Y', Player_Attributes.date) BETWEEN '2013' AND '2015';\t----- bird -----\teuropean_football_2",
    "133": "SELECT League.name, COUNT(Match.id) AS match_count FROM Match INNER JOIN League ON Match.league_id = League.id GROUP BY Match.league_id, League.name ORDER BY match_count DESC LIMIT 1;\t----- bird -----\teuropean_football_2",
    "134": "SELECT DISTINCT Team.team_fifa_api_id FROM Team INNER JOIN Team_Attributes ON Team.team_fifa_api_id = Team_Attributes.team_fifa_api_id WHERE Team_Attributes.buildUpPlaySpeed > 50 AND Team_Attributes.buildUpPlaySpeed < 60;\t----- bird -----\teuropean_football_2",
    "135": "SELECT DISTINCT Team.team_long_name FROM Team INNER JOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id WHERE strftime('%Y', Team_Attributes.date) = '2012' AND Team_Attributes.buildUpPlayPassing > (     SELECT AVG(Team_Attributes.buildUpPlayPassing)     FROM Team_Attributes     WHERE strftime('%Y', Team_Attributes.date) = '2012'     AND Team_Attributes.buildUpPlayPassing IS NOT NULL );\t----- bird -----\teuropean_football_2",
    "136": "SELECT      (COUNT(DISTINCT pa.player_api_id) * 100.0 / COUNT(DISTINCT p.player_api_id)) AS percentage_left_foot FROM      Player p JOIN      Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE      pa.preferred_foot = 'left'     AND strftime('%Y', p.birthday) BETWEEN '1987' AND '1992'\t----- bird -----\teuropean_football_2",
    "137": "SELECT AVG(Player_Attributes.long_shots)  FROM Player  INNER JOIN Player_Attributes  ON Player.player_fifa_api_id = Player_Attributes.player_fifa_api_id  WHERE Player.player_name = 'Ahmed Samir Farag';\t----- bird -----\teuropean_football_2",
    "138": "SELECT Player.player_name FROM Player INNER JOIN Player_Attributes ON Player.player_fifa_api_id = Player_Attributes.player_fifa_api_id WHERE Player.height > 180 GROUP BY Player.player_fifa_api_id ORDER BY AVG(Player_Attributes.heading_accuracy) DESC LIMIT 10;\t----- bird -----\teuropean_football_2",
    "139": "SELECT League.name FROM Match INNER JOIN League ON Match.league_id = League.id WHERE Match.season = '2009/2010' GROUP BY Match.league_id HAVING AVG(Match.home_team_goal) > AVG(Match.away_team_goal)\t----- bird -----\teuropean_football_2",
    "140": "SELECT Player.player_name FROM Player WHERE substr(Player.birthday, 1, 4) = '1970' AND substr(Player.birthday, 6, 2) = '10';\t----- bird -----\teuropean_football_2",
    "141": "SELECT Player_Attributes.overall_rating FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player.player_name = 'Gabriel Tamas' AND strftime('%Y', Player_Attributes.date) = '2011';\t----- bird -----\teuropean_football_2",
    "142": "SELECT AVG(Match.home_team_goal) AS average_home_team_goal FROM Match JOIN League ON Match.league_id = League.id JOIN Country ON League.country_id = Country.id WHERE Country.name = 'Poland' AND Match.season = '2010/2011';\t----- bird -----\teuropean_football_2",
    "143": "SELECT Player.player_name FROM (     SELECT Player.player_api_id, AVG(Player_Attributes.finishing) AS avg_finishing     FROM Player     INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id     WHERE Player.height = (SELECT MAX(height) FROM Player)        OR Player.height = (SELECT MIN(height) FROM Player)     GROUP BY Player.player_api_id ) AS subquery ORDER BY avg_finishing DESC LIMIT 1;\t----- bird -----\teuropean_football_2",
    "144": "SELECT AVG(t2.overall_rating) AS average_overall_rating FROM Player AS t1 INNER JOIN Player_Attributes AS t2 ON t1.player_api_id = t2.player_api_id WHERE t1.height > 170 AND strftime('%Y', t2.date) BETWEEN '2010' AND '2015';\t----- bird -----\teuropean_football_2",
    "145": "SELECT      (AVG(pa1.ball_control) - AVG(pa2.ball_control)) AS ball_control_difference FROM      Player p1 INNER JOIN      Player_Attributes pa1 ON p1.player_api_id = pa1.player_api_id INNER JOIN      Player p2 ON p2.player_api_id = pa2.player_api_id INNER JOIN      Player_Attributes pa2 ON p2.player_api_id = pa2.player_api_id WHERE      p1.player_name = 'Abdou Diallo' AND      p2.player_name = 'Aaron Appindangoye';\t----- bird -----\teuropean_football_2",
    "146": "SELECT player_name FROM Player WHERE player_name IN ('Aaron Lennon', 'Abdelaziz Barrada') ORDER BY birthday ASC LIMIT 1;\t----- bird -----\teuropean_football_2",
    "147": "SELECT player_name FROM Player ORDER BY height DESC LIMIT 1;\t----- bird -----\teuropean_football_2",
    "148": "SELECT COUNT(*) FROM Player_Attributes WHERE preferred_foot = 'left' AND attacking_work_rate = 'low';\t----- bird -----\teuropean_football_2",
    "149": "SELECT COUNT(DISTINCT Player.id) FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE strftime('%Y', Player.birthday) < '1986' AND Player_Attributes.defensive_work_rate = 'high';\t----- bird -----\teuropean_football_2",
    "150": "SELECT DISTINCT Player.player_name FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player_Attributes.volleys > 70 AND Player_Attributes.dribbling > 70;\t----- bird -----\teuropean_football_2",
    "151": "SELECT COUNT(*) FROM Match INNER JOIN League ON Match.league_id = League.id WHERE League.name = 'Belgium Jupiler League'   AND SUBSTR(Match.date, 1, 7) = '2009-04';\t----- bird -----\teuropean_football_2",
    "152": "SELECT L.name FROM Match M INNER JOIN League L ON M.league_id = L.id WHERE M.season = '2008/2009' GROUP BY M.league_id ORDER BY COUNT(M.id) DESC LIMIT 1;\t----- bird -----\teuropean_football_2",
    "153": "SELECT      ((ab.overall_rating - pp.overall_rating) * 100.0 / pp.overall_rating) AS percentage_increase FROM      (SELECT pa.overall_rating       FROM Player p       INNER JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id       WHERE p.player_name = 'Ariel Borysiuk') ab,     (SELECT pa.overall_rating       FROM Player p       INNER JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id       WHERE p.player_name = 'Paulin Puel') pp;\t----- bird -----\teuropean_football_2",
    "154": "SELECT AVG(Player_Attributes.overall_rating) FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player.player_name = 'Pietro Marino';\t----- bird -----\teuropean_football_2",
    "155": "SELECT MAX(Team_Attributes.chanceCreationPassing) AS highest_chance_creation_passing,         Team_Attributes.chanceCreationPassingClass FROM Team INNER JOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id WHERE Team.team_long_name = 'Ajax' GROUP BY Team_Attributes.chanceCreationPassingClass ORDER BY highest_chance_creation_passing DESC LIMIT 1;\t----- bird -----\teuropean_football_2",
    "156": "SELECT Player.player_name FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player_Attributes.overall_rating = 77 AND Player_Attributes.date LIKE '2016-06-23%' ORDER BY Player.birthday ASC LIMIT 1;\t----- bird -----\teuropean_football_2",
    "157": "SELECT Player_Attributes.overall_rating FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player.player_name = 'Aaron Mooy' AND Player_Attributes.date LIKE '2016-02-04%'\t----- bird -----\teuropean_football_2",
    "158": "SELECT pa.attacking_work_rate FROM Player p INNER JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE p.player_name = 'Francesco Migliore' AND pa.date LIKE '2015-05-01%'\t----- bird -----\teuropean_football_2",
    "159": "SELECT pa.date FROM Player p INNER JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id WHERE p.player_name = 'Kevin Constant' ORDER BY pa.crossing DESC LIMIT 1;\t----- bird -----\teuropean_football_2",
    "160": "SELECT Team_Attributes.buildUpPlayPassingClass FROM Team INNER JOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id WHERE Team.team_long_name = 'FC Lorient' AND Team_Attributes.date LIKE '2010-02-22%'\t----- bird -----\teuropean_football_2",
    "161": "SELECT Team_Attributes.defenceAggressionClass FROM Team INNER JOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id WHERE Team.team_long_name = 'Hannover 96' AND Team_Attributes.date LIKE '2015-09-10%'\t----- bird -----\teuropean_football_2",
    "162": "SELECT AVG(Player_Attributes.overall_rating)  FROM Player  INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id  WHERE Player.player_name = 'Marko Arnautovic'  AND substr(Player_Attributes.date, 1, 10) BETWEEN '2007-02-22' AND '2016-04-21';\t----- bird -----\teuropean_football_2",
    "163": "SELECT      ((donovan.overall_rating - bowery.overall_rating) * 100.0 / donovan.overall_rating) AS percentage_difference FROM      (SELECT overall_rating       FROM Player       INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id       WHERE Player.player_name = 'Landon Donovan'       AND Player_Attributes.date = '2013-07-12') AS donovan,     (SELECT overall_rating       FROM Player       INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id       WHERE Player.player_name = 'Jordan Bowery'       AND Player_Attributes.date = '2013-07-12') AS bowery;\t----- bird -----\teuropean_football_2",
    "164": "SELECT player_name FROM Player ORDER BY height DESC LIMIT 1;\t----- bird -----\teuropean_football_2",
    "165": "SELECT Player.player_name FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id ORDER BY Player_Attributes.overall_rating DESC LIMIT 1;\t----- bird -----\teuropean_football_2",
    "166": "SELECT DISTINCT Player.player_name FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player_Attributes.attacking_work_rate = 'high';\t----- bird -----\teuropean_football_2",
    "167": "SELECT Team.team_short_name FROM Team INNER JOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id WHERE Team_Attributes.chanceCreationPassingClass = 'Safe';\t----- bird -----\teuropean_football_2",
    "168": "SELECT COUNT(*) FROM Player WHERE Player.birthday > '1990-01-01' AND Player.player_name LIKE 'Aaron%'\t----- bird -----\teuropean_football_2",
    "169": "SELECT      (SELECT jumping FROM Player_Attributes WHERE id = 6) -      (SELECT jumping FROM Player_Attributes WHERE id = 23) AS jumping_difference\t----- bird -----\teuropean_football_2",
    "170": "SELECT Player.id FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player_Attributes.preferred_foot = 'right' ORDER BY Player_Attributes.potential ASC LIMIT 4;\t----- bird -----\teuropean_football_2",
    "171": "SELECT COUNT(*) FROM Player_Attributes WHERE preferred_foot = 'left' AND crossing = (SELECT MAX(crossing) FROM Player_Attributes)\t----- bird -----\teuropean_football_2",
    "172": "SELECT Match.home_team_goal, Match.away_team_goal FROM Match INNER JOIN League ON Match.league_id = League.id WHERE Match.date LIKE '2008-09-24%' AND League.name = 'Belgium Jupiler League';\t----- bird -----\teuropean_football_2",
    "173": "SELECT Team_Attributes.buildUpPlaySpeedClass FROM Team INNER JOIN Team_Attributes ON Team.team_api_id = Team_Attributes.team_api_id WHERE Team.team_long_name = 'KSV Cercle Brugge';\t----- bird -----\teuropean_football_2",
    "174": "SELECT pa.finishing, pa.curve FROM Player p INNER JOIN Player_Attributes pa ON p.player_api_id = pa.player_api_id ORDER BY p.weight DESC LIMIT 1;\t----- bird -----\teuropean_football_2",
    "175": "SELECT League.name FROM Match INNER JOIN League ON Match.league_id = League.id WHERE Match.season = '2015/2016' GROUP BY Match.league_id ORDER BY COUNT(Match.id) DESC LIMIT 4;\t----- bird -----\teuropean_football_2",
    "176": "SELECT Team.team_long_name FROM Match INNER JOIN Team ON Match.away_team_api_id = Team.team_api_id ORDER BY Match.away_team_goal DESC LIMIT 1;\t----- bird -----\teuropean_football_2",
    "177": "SELECT Player.player_name FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id ORDER BY Player_Attributes.overall_rating DESC LIMIT 1;\t----- bird -----\teuropean_football_2",
    "178": "SELECT (CAST(COUNT(*) AS REAL) * 100 / (SELECT COUNT(*) FROM Player)) AS percentage FROM Player INNER JOIN Player_Attributes ON Player.player_api_id = Player_Attributes.player_api_id WHERE Player.height < 180 AND Player_Attributes.overall_rating > 70;\t----- bird -----\teuropean_football_2",
    "179": "SELECT drivers.driverRef FROM qualifying INNER JOIN drivers ON qualifying.driverId = drivers.driverId WHERE qualifying.raceId = 20 ORDER BY CAST(SUBSTR(qualifying.q1, 1, INSTR(qualifying.q1, ':') - 1) AS INTEGER) * 60 +           CAST(SUBSTR(qualifying.q1, INSTR(qualifying.q1, ':') + 1) AS FLOAT) DESC LIMIT 5;\t----- bird -----\tformula_1",
    "180": "SELECT drivers.surname FROM qualifying INNER JOIN drivers ON qualifying.driverId = drivers.driverId WHERE qualifying.raceId = 19 ORDER BY CAST(SUBSTR(qualifying.q2, 1, INSTR(qualifying.q2, ':') - 1) AS INTEGER) * 60 +           CAST(SUBSTR(qualifying.q2, INSTR(qualifying.q2, ':') + 1) AS FLOAT) ASC LIMIT 1;\t----- bird -----\tformula_1",
    "181": "SELECT races.name FROM races INNER JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.country = 'Germany';\t----- bird -----\tformula_1",
    "182": "SELECT circuits.lat, circuits.lng FROM circuits INNER JOIN races ON circuits.circuitId = races.circuitId WHERE races.name = 'Australian Grand Prix';\t----- bird -----\tformula_1",
    "183": "SELECT circuits.lat, circuits.lng FROM races INNER JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.name = 'Abu Dhabi Grand Prix';\t----- bird -----\tformula_1",
    "184": "SELECT q1 FROM qualifying INNER JOIN drivers ON qualifying.driverId = drivers.driverId WHERE drivers.forename = 'Bruno'    AND drivers.surname = 'Senna'    AND qualifying.raceId = 354;\t----- bird -----\tformula_1",
    "185": "SELECT qualifying.number FROM qualifying WHERE qualifying.raceId = 903   AND qualifying.q3 = '0:01:54';\t----- bird -----\tformula_1",
    "186": "SELECT COUNT(*) FROM races INNER JOIN results ON races.raceId = results.raceId WHERE races.name = 'Bahrain Grand Prix'   AND races.year = 2007   AND results.time IS NULL;\t----- bird -----\tformula_1",
    "187": "SELECT d.forename, d.surname FROM drivers d INNER JOIN results r ON d.driverId = r.driverId WHERE r.raceId = 592 AND r.time IS NOT NULL ORDER BY d.dob ASC LIMIT 1;\t----- bird -----\tformula_1",
    "188": "SELECT drivers.url FROM lapTimes INNER JOIN drivers ON lapTimes.driverId = drivers.driverId WHERE lapTimes.time LIKE '0:01:27%' AND lapTimes.raceId = 161;\t----- bird -----\tformula_1",
    "189": "SELECT circuits.lat, circuits.lng FROM races INNER JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.name = 'Malaysian Grand Prix';\t----- bird -----\tformula_1",
    "190": "SELECT constructors.url FROM constructorResults INNER JOIN constructors ON constructorResults.constructorId = constructors.constructorId WHERE constructorResults.raceId = 9 ORDER BY constructorResults.points DESC LIMIT 1;\t----- bird -----\tformula_1",
    "191": "SELECT drivers.code FROM qualifying INNER JOIN drivers ON qualifying.driverId = drivers.driverId WHERE qualifying.raceId = 45 AND qualifying.q3 = '0:01:33';\t----- bird -----\tformula_1",
    "192": "SELECT seasons.url FROM races JOIN seasons ON races.year = seasons.year WHERE races.raceId = 901;\t----- bird -----\tformula_1",
    "193": "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN results ON drivers.driverId = results.driverId WHERE results.raceId = 872 AND results.time IS NOT NULL ORDER BY drivers.dob DESC LIMIT 1;\t----- bird -----\tformula_1",
    "194": "SELECT d.nationality FROM results r INNER JOIN drivers d ON r.driverId = d.driverId ORDER BY CAST(r.fastestLapSpeed AS FLOAT) DESC LIMIT 1;\t----- bird -----\tformula_1",
    "195": "SELECT      ((CAST(r1.fastestLapSpeed AS FLOAT) - CAST(r2.fastestLapSpeed AS FLOAT)) * 100 / CAST(r1.fastestLapSpeed AS FLOAT)) AS percentage_faster FROM      results r1 INNER JOIN      drivers d ON r1.driverId = d.driverId INNER JOIN      results r2 ON r1.driverId = r2.driverId WHERE      d.forename = 'Paul'      AND d.surname = 'di Resta'     AND r1.raceId = 853     AND r2.raceId = 854;\t----- bird -----\tformula_1",
    "196": "SELECT      (CAST(COUNT(results.driverId) FILTER (WHERE results.time IS NOT NULL) AS REAL) * 100 / COUNT(results.driverId)) AS percentage FROM      races INNER JOIN      results ON races.raceId = results.raceId WHERE      races.date = '1983-07-16';\t----- bird -----\tformula_1",
    "197": "SELECT races.name FROM races WHERE races.year = (SELECT MIN(EXTRACT(YEAR FROM races.date)) FROM races)   AND EXTRACT(MONTH FROM races.date) = (SELECT MIN(EXTRACT(MONTH FROM races.date)) FROM races WHERE EXTRACT(YEAR FROM races.date) = (SELECT MIN(EXTRACT(YEAR FROM races.date)) FROM races));\t----- bird -----\tformula_1",
    "198": "SELECT drivers.forename, drivers.surname, driverStandings.points FROM driverStandings INNER JOIN drivers ON driverStandings.driverId = drivers.driverId ORDER BY driverStandings.points DESC LIMIT 1;\t----- bird -----\tformula_1",
    "199": "SELECT drivers.forename, drivers.surname, races.name FROM lapTimes INNER JOIN drivers ON lapTimes.driverId = drivers.driverId INNER JOIN races ON lapTimes.raceId = races.raceId ORDER BY lapTimes.milliseconds ASC LIMIT 1;\t----- bird -----\tformula_1",
    "200": "SELECT AVG(lapTimes.milliseconds) AS average_lap_time FROM lapTimes INNER JOIN drivers ON lapTimes.driverId = drivers.driverId INNER JOIN races ON lapTimes.raceId = races.raceId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' AND races.name = 'Malaysian Grand Prix' AND races.year = 2009;\t----- bird -----\tformula_1",
    "201": "SELECT      CAST(COUNT(CASE WHEN results.position > 1 THEN 1 END) AS REAL) * 100 / COUNT(*) AS percentage FROM      drivers INNER JOIN      results ON drivers.driverId = results.driverId INNER JOIN      races ON results.raceId = races.raceId WHERE      drivers.surname = 'Hamilton'      AND races.year >= 2010;\t----- bird -----\tformula_1",
    "202": "SELECT d.forename, d.surname, d.nationality, MAX(ds.points) AS max_points FROM driverStandings ds JOIN drivers d ON ds.driverId = d.driverId GROUP BY ds.driverId ORDER BY MAX(ds.wins) DESC LIMIT 1;\t----- bird -----\tformula_1",
    "203": "SELECT      YEAR(CURRENT_TIMESTAMP) - YEAR(drivers.dob) AS age,      drivers.forename,      drivers.surname  FROM      drivers  WHERE      drivers.nationality = 'Japanese'  ORDER BY      drivers.dob DESC  LIMIT 1;\t----- bird -----\tformula_1",
    "204": "SELECT races.name, circuits.name, circuits.location FROM races INNER JOIN circuits ON races.circuitId = circuits.circuitId WHERE MONTH(races.date) = 9 AND YEAR(races.date) = 2005;\t----- bird -----\tformula_1",
    "205": "SELECT races.name FROM drivers INNER JOIN results ON drivers.driverId = results.driverId INNER JOIN races ON results.raceId = races.raceId WHERE drivers.forename = 'Alex'  AND drivers.surname = 'Yoong'  AND results.position < 20;\t----- bird -----\tformula_1",
    "206": "SELECT r.name, r.year FROM drivers d INNER JOIN results res ON d.driverId = res.driverId INNER JOIN races r ON res.raceId = r.raceId WHERE d.forename = 'Michael' AND d.surname = 'Schumacher' ORDER BY res.milliseconds ASC LIMIT 1;\t----- bird -----\tformula_1",
    "207": "SELECT r.name AS race_name, res.points FROM drivers d INNER JOIN results res ON d.driverId = res.driverId INNER JOIN races r ON res.raceId = r.raceId WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton' ORDER BY r.year ASC LIMIT 1;\t----- bird -----\tformula_1",
    "208": "SELECT (CAST(COUNT(*) FILTER (WHERE circuits.country = 'Germany') AS REAL) * 100.0 / COUNT(*)) AS percentage FROM races INNER JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.name = 'European Grand Prix';\t----- bird -----\tformula_1",
    "209": "SELECT circuits.lat, circuits.lng FROM circuits WHERE circuits.name = 'Silverstone Circuit';\t----- bird -----\tformula_1",
    "210": "SELECT circuits.circuitRef FROM circuits WHERE circuits.name = 'Marina Bay Street Circuit';\t----- bird -----\tformula_1",
    "211": "SELECT drivers.country FROM drivers ORDER BY drivers.dob ASC LIMIT 1;\t----- bird -----\tformula_1",
    "212": "SELECT drivers.driverRef FROM races INNER JOIN results ON races.raceId = results.raceId INNER JOIN drivers ON results.driverId = drivers.driverId WHERE races.name = 'Canadian Grand Prix' AND races.year = 2007 AND results.positionOrder = 1;\t----- bird -----\tformula_1",
    "213": "SELECT races.name FROM drivers INNER JOIN results ON drivers.driverId = results.driverId INNER JOIN races ON results.raceId = races.raceId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton' ORDER BY results.rank ASC LIMIT 1;\t----- bird -----\tformula_1",
    "214": "SELECT MAX(CAST(results.fastestLapSpeed AS FLOAT)) AS fastest_lap_speed FROM races INNER JOIN results ON races.raceId = results.raceId WHERE races.name = 'Spanish Grand Prix' AND races.year = 2009;\t----- bird -----\tformula_1",
    "215": "SELECT results.positionOrder FROM drivers INNER JOIN results ON drivers.driverId = results.driverId INNER JOIN races ON results.raceId = races.raceId WHERE drivers.forename = 'Lewis'   AND drivers.surname = 'Hamilton'   AND races.name = 'Chinese Grand Prix'   AND races.year = 2008;\t----- bird -----\tformula_1",
    "216": "SELECT results.time FROM races INNER JOIN results ON races.raceId = results.raceId WHERE races.year = 2008   AND races.name = 'Chinese Grand Prix'   AND results.rank = 2;\t----- bird -----\tformula_1",
    "217": "SELECT COUNT(DISTINCT drivers.driverId) FROM races INNER JOIN results ON races.raceId = results.raceId INNER JOIN drivers ON results.driverId = drivers.driverId WHERE races.name = 'Chinese Grand Prix'   AND races.year = 2008   AND results.time IS NOT NULL   AND (SELECT COUNT(results.raceId) FROM results WHERE results.driverId = drivers.driverId) > 0;\t----- bird -----\tformula_1",
    "218": "SELECT      ((last_driver_time - champion_time) * 100.0 / last_driver_time) AS percentage_faster FROM (     SELECT          (SELECT milliseconds           FROM results           WHERE raceId = (SELECT raceId FROM races WHERE year = 2008 AND name = 'Australian Grand Prix')           AND positionOrder = 1) AS champion_time,         (SELECT milliseconds           FROM results           WHERE raceId = (SELECT raceId FROM races WHERE year = 2008 AND name = 'Australian Grand Prix')           AND time IS NOT NULL           ORDER BY positionOrder DESC           LIMIT 1) AS last_driver_time ) AS times;\t----- bird -----\tformula_1",
    "219": "SELECT COUNT(*) FROM circuits WHERE country = 'Australia' AND location = 'Adelaide';\t----- bird -----\tformula_1",
    "220": "SELECT MAX(constructorStandings.points) AS maximum_points FROM constructorStandings INNER JOIN constructors ON constructorStandings.constructorId = constructors.constructorId WHERE constructors.nationality = 'British';\t----- bird -----\tformula_1",
    "221": "SELECT constructors.name FROM constructorResults INNER JOIN constructors ON constructorResults.constructorId = constructors.constructorId WHERE constructorResults.raceId = 291 AND constructorResults.points = 0;\t----- bird -----\tformula_1",
    "222": "SELECT COUNT(DISTINCT cr.constructorId) FROM constructorResults cr INNER JOIN constructors c ON cr.constructorId = c.constructorId WHERE c.nationality = 'Japanese' AND cr.points = 0 GROUP BY cr.constructorId HAVING COUNT(cr.raceId) = 2;\t----- bird -----\tformula_1",
    "223": "SELECT      (CAST(COUNT(DISTINCT results.driverId) AS REAL) * 100.0 /      (SELECT COUNT(DISTINCT results.driverId)       FROM results       INNER JOIN races ON results.raceId = races.raceId       INNER JOIN drivers ON results.driverId = drivers.driverId       WHERE drivers.nationality = 'Japanese'       AND races.year BETWEEN 2007 AND 2009)) AS completion_percentage FROM      results  INNER JOIN races ON results.raceId = races.raceId  INNER JOIN drivers ON results.driverId = drivers.driverId  WHERE      drivers.nationality = 'Japanese'      AND races.year BETWEEN 2007 AND 2009      AND results.time IS NOT NULL;\t----- bird -----\tformula_1",
    "224": "SELECT races.year, AVG(STRFTIME('%s', results.time) - STRFTIME('%s', '00:00:00')) AS average_champion_time_seconds FROM results INNER JOIN races ON results.raceId = races.raceId WHERE results.positionOrder = 1 AND races.year < 1975 AND results.time IS NOT NULL GROUP BY races.year;\t----- bird -----\tformula_1",
    "225": "SELECT results.fastestLap FROM races INNER JOIN results ON races.raceId = results.raceId WHERE races.year = 2009 AND results.position = 1;\t----- bird -----\tformula_1",
    "226": "SELECT AVG(CAST(results.fastestLapSpeed AS FLOAT)) AS average_fastest_lap_speed FROM races INNER JOIN results ON races.raceId = results.raceId WHERE races.year = 2009 AND races.name = 'Spanish Grand Prix';\t----- bird -----\tformula_1",
    "227": "SELECT      CAST(COUNT(DISTINCT df2.driverId) AS REAL) * 100 / COUNT(DISTINCT df1.driverId) AS percentage FROM      (SELECT results.driverId      FROM results      INNER JOIN races ON results.raceId = races.raceId      WHERE races.year BETWEEN 2000 AND 2005) AS df1 INNER JOIN      (SELECT results.driverId      FROM results      INNER JOIN drivers ON results.driverId = drivers.driverId      WHERE YEAR(drivers.dob) < 1985 AND results.laps > 50) AS df2 ON df1.driverId = df2.driverId;\t----- bird -----\tformula_1",
    "228": "SELECT COUNT(DISTINCT drivers.driverId) FROM drivers INNER JOIN lapTimes ON drivers.driverId = lapTimes.driverId WHERE drivers.nationality = 'French' AND CAST(SUBSTR(lapTimes.time, 1, INSTR(lapTimes.time, ':') - 1) AS INTEGER) * 60 + CAST(SUBSTR(lapTimes.time, INSTR(lapTimes.time, ':') + 1) AS FLOAT) < 120;\t----- bird -----\tformula_1",
    "229": "SELECT drivers.code FROM drivers WHERE drivers.nationality = 'American';\t----- bird -----\tformula_1",
    "230": "SELECT COUNT(*)  FROM (     SELECT drivers.code      FROM drivers      ORDER BY drivers.dob DESC      LIMIT 3 ) AS top3_drivers WHERE drivers.nationality = 'Netherlandic';\t----- bird -----\tformula_1",
    "231": "SELECT drivers.driverRef FROM drivers WHERE drivers.nationality = 'German' ORDER BY drivers.dob ASC LIMIT 1;\t----- bird -----\tformula_1",
    "232": "SELECT DISTINCT drivers.driverId, drivers.code FROM drivers INNER JOIN results ON drivers.driverId = results.driverId WHERE YEAR(drivers.dob) = 1971 AND results.fastestLapTime IS NOT NULL;\t----- bird -----\tformula_1",
    "233": "SELECT COUNT(*) FROM results WHERE raceId > 50    AND raceId < 100   AND time IS NOT NULL   AND statusId = 2;\t----- bird -----\tformula_1",
    "234": "SELECT circuits.location, circuits.lat, circuits.lng, COUNT(*) FROM circuits WHERE circuits.country = 'Austria' GROUP BY circuits.location, circuits.lat, circuits.lng;\t----- bird -----\tformula_1",
    "235": "SELECT races.year, races.name, races.date, races.time FROM drivers JOIN qualifying ON drivers.driverId = qualifying.driverId JOIN races ON qualifying.raceId = races.raceId ORDER BY drivers.dob DESC, races.date LIMIT 1;\t----- bird -----\tformula_1",
    "236": "SELECT drivers.forename, drivers.surname FROM drivers INNER JOIN pitStops ON drivers.driverId = pitStops.driverId WHERE drivers.nationality = 'German'   AND YEAR(drivers.dob) BETWEEN 1980 AND 1985 GROUP BY drivers.driverId, drivers.forename, drivers.surname ORDER BY AVG(CAST(pitStops.duration AS FLOAT)) ASC LIMIT 3;\t----- bird -----\tformula_1",
    "237": "SELECT drivers.forename, drivers.surname, results.time FROM results INNER JOIN races ON results.raceId = races.raceId INNER JOIN drivers ON results.driverId = drivers.driverId WHERE races.name = 'Canadian Grand Prix'   AND races.year = 2008   AND results.positionOrder = 1;\t----- bird -----\tformula_1",
    "238": "SELECT constructors.constructorRef, constructors.url FROM results INNER JOIN races ON results.raceId = races.raceId INNER JOIN constructors ON results.constructorId = constructors.constructorId WHERE races.year = 2009   AND races.name = 'Singapore Grand Prix' ORDER BY CAST(results.time AS TIME) ASC LIMIT 1;\t----- bird -----\tformula_1",
    "239": "SELECT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.superhero_name = '3-D Man';\t----- bird -----\tsuperhero",
    "240": "SELECT      SUM(cr.points) AS score,      c.name,      c.nationality FROM      constructorResults cr INNER JOIN      races r ON cr.raceId = r.raceId INNER JOIN      constructors c ON cr.constructorId = c.constructorId WHERE      r.name = 'Monaco Grand Prix'      AND r.year BETWEEN 1980 AND 2010 GROUP BY      cr.constructorId ORDER BY      score DESC LIMIT 1;\t----- bird -----\tformula_1",
    "241": "SELECT drivers.forename, drivers.surname FROM races INNER JOIN circuits ON races.circuitId = circuits.circuitId INNER JOIN qualifying ON races.raceId = qualifying.raceId INNER JOIN drivers ON qualifying.driverId = drivers.driverId WHERE races.year = 2008   AND circuits.name = 'Marina Bay Street Circuit'   AND qualifying.q3 = (     SELECT MIN(q3)     FROM qualifying     INNER JOIN races ON qualifying.raceId = races.raceId     INNER JOIN circuits ON races.circuitId = circuits.circuitId     WHERE races.year = 2008       AND circuits.name = 'Marina Bay Street Circuit'   );\t----- bird -----\tformula_1",
    "242": "SELECT CONCAT(d.forename, ' ', d.surname) AS full_name,         d.nationality,         r.name AS race_name FROM drivers d JOIN results res ON d.driverId = res.driverId JOIN races r ON res.raceId = r.raceId WHERE d.dob = (SELECT MAX(dob) FROM drivers) ORDER BY r.date LIMIT 1;\t----- bird -----\tformula_1",
    "243": "SELECT COUNT(*) AS accident_count FROM results INNER JOIN races ON results.raceId = races.raceId WHERE races.name = 'Canadian Grand Prix' AND results.statusId = 3 GROUP BY results.driverId ORDER BY accident_count DESC LIMIT 1;\t----- bird -----\tformula_1",
    "244": "SELECT drivers.forename, drivers.surname FROM lapTimes INNER JOIN drivers ON lapTimes.driverId = drivers.driverId ORDER BY lapTimes.milliseconds ASC LIMIT 1;\t----- bird -----\tformula_1",
    "245": "SELECT results.fastestLapTime FROM circuits INNER JOIN races ON circuits.circuitId = races.circuitId INNER JOIN results ON races.raceId = results.raceId WHERE circuits.country = 'Italy'\t----- bird -----\tformula_1",
    "246": "SELECT COUNT(*) FROM hero_power INNER JOIN superpower ON hero_power.power_id = superpower.id INNER JOIN superhero ON hero_power.hero_id = superhero.id WHERE superpower.power_name = 'Super Strength' AND superhero.height_cm > 200;\t----- bird -----\tsuperhero",
    "247": "SELECT COUNT(*) FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id INNER JOIN hero_power ON hero_power.hero_id = superhero.id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE colour.colour = 'Blue' AND superpower.power_name = 'Agility';\t----- bird -----\tsuperhero",
    "248": "SELECT superhero.superhero_name FROM superhero INNER JOIN colour AS eye_colour ON superhero.eye_colour_id = eye_colour.id INNER JOIN colour AS hair_colour ON superhero.hair_colour_id = hair_colour.id WHERE eye_colour.colour = 'Blue' AND hair_colour.colour = 'Blond';\t----- bird -----\tsuperhero",
    "249": "SELECT superhero.superhero_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics' ORDER BY superhero.height_cm DESC;\t----- bird -----\tsuperhero",
    "250": "SELECT colour.colour FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE publisher.publisher_name = 'Marvel Comics' GROUP BY superhero.eye_colour_id, colour.colour ORDER BY COUNT(superhero.id) DESC;\t----- bird -----\tsuperhero",
    "251": "SELECT superhero.superhero_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE publisher.publisher_name = 'Marvel Comics' AND superpower.power_name = 'Super Strength';\t----- bird -----\tsuperhero",
    "252": "SELECT p.publisher_name FROM superhero s INNER JOIN hero_attribute ha ON s.id = ha.hero_id INNER JOIN attribute a ON ha.attribute_id = a.id INNER JOIN publisher p ON s.publisher_id = p.id WHERE a.attribute_name = 'Speed' ORDER BY ha.attribute_value ASC LIMIT 1;\t----- bird -----\tsuperhero",
    "253": "SELECT COUNT(*) FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE colour.colour = 'Gold' AND publisher.publisher_name = 'Marvel Comics';\t----- bird -----\tsuperhero",
    "254": "SELECT s.superhero_name FROM superhero s INNER JOIN hero_attribute ha ON s.id = ha.hero_id INNER JOIN attribute a ON ha.attribute_id = a.id WHERE a.attribute_name = 'Intelligence' ORDER BY ha.attribute_value ASC LIMIT 1;\t----- bird -----\tsuperhero",
    "255": "SELECT race.race FROM superhero INNER JOIN race ON superhero.race_id = race.id WHERE superhero.superhero_name = 'Copycat';\t----- bird -----\tsuperhero",
    "256": "SELECT superhero.superhero_name FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Durability' AND hero_attribute.attribute_value < 50;\t----- bird -----\tsuperhero",
    "257": "SELECT superhero.superhero_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Death Touch';\t----- bird -----\tsuperhero",
    "258": "SELECT COUNT(*) FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE gender.gender = 'Female'   AND attribute.attribute_name = 'Strength'   AND hero_attribute.attribute_value = 100;\t----- bird -----\tsuperhero",
    "259": "SELECT      (COUNT(CASE WHEN alignment.alignment = 'Neutral' THEN 1 END) * 100.0 / COUNT(superhero.id)) AS percentage_neutral,     COUNT(CASE WHEN alignment.alignment = 'Neutral' AND publisher.publisher_name = 'Marvel Comics' THEN 1 END) AS marvel_neutral FROM      superhero INNER JOIN      alignment ON superhero.alignment_id = alignment.id INNER JOIN      publisher ON superhero.publisher_id = publisher.id;\t----- bird -----\tsuperhero",
    "260": "SELECT      ABS(COUNT(CASE WHEN publisher.publisher_name = 'Marvel Comics' THEN superhero.id END) -          COUNT(CASE WHEN publisher.publisher_name = 'DC Comics' THEN superhero.id END)) AS difference FROM      publisher INNER JOIN      superhero ON publisher.id = superhero.publisher_id WHERE      publisher.publisher_name IN ('Marvel Comics', 'DC Comics');\t----- bird -----\tsuperhero",
    "261": "SELECT publisher.id FROM publisher WHERE publisher.publisher_name = 'Star Trek';\t----- bird -----\tsuperhero",
    "262": "SELECT COUNT(*)  FROM superhero  WHERE full_name IS NULL;\t----- bird -----\tsuperhero",
    "263": "SELECT AVG(superhero.weight_kg)  FROM superhero  INNER JOIN gender ON superhero.gender_id = gender.id  WHERE gender.gender = 'Female';\t----- bird -----\tsuperhero",
    "264": "SELECT DISTINCT superpower.power_name FROM gender INNER JOIN superhero ON gender.id = superhero.gender_id INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE gender.gender = 'Male' LIMIT 5;\t----- bird -----\tsuperhero",
    "265": "SELECT superhero.superhero_name FROM superhero LEFT JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.height_cm BETWEEN 170 AND 190   AND (colour.colour IS NULL OR colour.colour = 'No Colour');\t----- bird -----\tsuperhero",
    "266": "SELECT colour.colour FROM superhero INNER JOIN race ON superhero.race_id = race.id INNER JOIN colour ON superhero.hair_colour_id = colour.id WHERE superhero.height_cm = 185 AND race.race = 'human';\t----- bird -----\tsuperhero",
    "267": "SELECT (CAST(COUNT(*) AS REAL) * 100 / (SELECT COUNT(*) FROM superhero WHERE height_cm BETWEEN 150 AND 180)) AS percentage FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE height_cm BETWEEN 150 AND 180 AND publisher_name = 'Marvel Comics';\t----- bird -----\tsuperhero",
    "268": "SELECT superhero.superhero_name FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id WHERE gender.gender = 'Male' AND superhero.weight_kg > (SELECT AVG(weight_kg) * 0.79 FROM superhero);\t----- bird -----\tsuperhero",
    "269": "SELECT superpower.power_name FROM hero_power INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE hero_power.hero_id = 1;\t----- bird -----\tsuperhero",
    "270": "SELECT COUNT(DISTINCT hero_power.hero_id) FROM hero_power INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Stealth';\t----- bird -----\tsuperhero",
    "271": "SELECT superhero.full_name FROM hero_attribute INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id INNER JOIN superhero ON hero_attribute.hero_id = superhero.id WHERE attribute.attribute_name = 'Strength' ORDER BY hero_attribute.attribute_value DESC LIMIT 1;\t----- bird -----\tsuperhero",
    "272": "SELECT superhero.superhero_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE publisher.publisher_name = 'Dark Horse Comics'   AND attribute.attribute_name = 'Durability' ORDER BY hero_attribute.attribute_value DESC LIMIT 1;\t----- bird -----\tsuperhero",
    "273": "SELECT eye_colour.colour AS eye_colour,         hair_colour.colour AS hair_colour,         skin_colour.colour AS skin_colour FROM superhero INNER JOIN colour AS eye_colour ON superhero.eye_colour_id = eye_colour.id INNER JOIN colour AS hair_colour ON superhero.hair_colour_id = hair_colour.id INNER JOIN colour AS skin_colour ON superhero.skin_colour_id = skin_colour.id INNER JOIN gender ON superhero.gender_id = gender.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE gender.gender = 'Female'    AND publisher.publisher_name = 'Dark Horse Comics';\t----- bird -----\tsuperhero",
    "274": "SELECT superhero.superhero_name, publisher.publisher_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.hair_colour_id = superhero.skin_colour_id   AND superhero.hair_colour_id = superhero.eye_colour_id;\t----- bird -----\tsuperhero",
    "275": "SELECT      (CAST(COUNT(*) AS REAL) * 100.0 / (SELECT COUNT(*) FROM superhero                                          INNER JOIN gender ON superhero.gender_id = gender.id                                          WHERE gender.gender = 'Female')) AS percentage FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id INNER JOIN colour ON superhero.skin_colour_id = colour.id WHERE gender.gender = 'Female' AND colour.colour = 'Blue';\t----- bird -----\tsuperhero",
    "276": "SELECT COUNT(hero_power.hero_id) FROM hero_power INNER JOIN superhero ON hero_power.hero_id = superhero.id WHERE superhero.superhero_name = 'Amazo';\t----- bird -----\tsuperhero",
    "277": "SELECT superhero.height_cm FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Amber';\t----- bird -----\tsuperhero",
    "278": "SELECT superhero.superhero_name FROM superhero INNER JOIN colour AS eye_colour ON superhero.eye_colour_id = eye_colour.id INNER JOIN colour AS hair_colour ON superhero.hair_colour_id = hair_colour.id WHERE eye_colour.colour = 'Black' AND hair_colour.colour = 'Black';\t----- bird -----\tsuperhero",
    "279": "SELECT superhero.superhero_name FROM superhero INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE alignment.alignment = 'Neutral';\t----- bird -----\tsuperhero",
    "280": "SELECT COUNT(DISTINCT hero_attribute.hero_id) FROM hero_attribute INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE attribute.attribute_name = 'Strength' AND hero_attribute.attribute_value = (     SELECT MAX(hero_attribute.attribute_value)     FROM hero_attribute     INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id     WHERE attribute.attribute_name = 'Strength' );\t----- bird -----\tsuperhero",
    "281": "SELECT      (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM superhero                           INNER JOIN gender ON superhero.gender_id = gender.id                           WHERE gender.gender = 'Female')) AS percent FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE gender.gender = 'Female' AND publisher.publisher_name = 'Marvel Comics';\t----- bird -----\tsuperhero",
    "282": "SELECT      (SELECT weight_kg FROM superhero WHERE full_name = 'Emil Blonsky') -      (SELECT weight_kg FROM superhero WHERE full_name = 'Charles Chandler') AS weight_difference;\t----- bird -----\tsuperhero",
    "283": "SELECT AVG(height_cm)  FROM superhero WHERE height_cm IS NOT NULL AND height_cm != 0;\t----- bird -----\tsuperhero",
    "284": "SELECT superpower.power_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superhero.superhero_name = 'Abomination';\t----- bird -----\tsuperhero",
    "285": "SELECT s.superhero_name FROM superhero s INNER JOIN hero_attribute ha ON s.id = ha.hero_id INNER JOIN attribute a ON ha.attribute_id = a.id WHERE a.attribute_name = 'Speed' ORDER BY ha.attribute_value DESC LIMIT 1;\t----- bird -----\tsuperhero",
    "286": "SELECT attribute.attribute_name, hero_attribute.attribute_value FROM superhero INNER JOIN hero_attribute ON superhero.id = hero_attribute.hero_id INNER JOIN attribute ON hero_attribute.attribute_id = attribute.id WHERE superhero.superhero_name = '3-D Man';\t----- bird -----\tsuperhero",
    "287": "SELECT superhero.superhero_name FROM superhero INNER JOIN colour AS eye_colour ON superhero.eye_colour_id = eye_colour.id INNER JOIN colour AS hair_colour ON superhero.hair_colour_id = hair_colour.id WHERE eye_colour.colour = 'Blue' AND hair_colour.colour = 'Brown';\t----- bird -----\tsuperhero",
    "288": "SELECT DISTINCT publisher.publisher_name FROM superhero INNER JOIN publisher ON superhero.publisher_id = publisher.id WHERE superhero.superhero_name IN ('Hawkman', 'Karate Kid', 'Speedy');\t----- bird -----\tsuperhero",
    "289": "SELECT (CAST(COUNT(*) AS REAL) * 100.0 / (SELECT COUNT(*) FROM superhero)) AS percentage FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE colour.colour = 'Blue' AND colour.id = 7;\t----- bird -----\tsuperhero",
    "290": "SELECT CAST(SUM(CASE WHEN gender.gender = 'Male' THEN 1 ELSE 0 END) AS REAL) /         SUM(CASE WHEN gender.gender = 'Female' THEN 1 ELSE 0 END) AS ratio FROM superhero INNER JOIN gender ON superhero.gender_id = gender.id;\t----- bird -----\tsuperhero",
    "291": "SELECT colour.colour FROM superhero INNER JOIN colour ON superhero.eye_colour_id = colour.id WHERE superhero.full_name = 'Karen Beecher-Duncan';\t----- bird -----\tsuperhero",
    "292": "SELECT      (SUM(CASE WHEN superhero.eye_colour_id = 7 THEN 1 ELSE 0 END) -       SUM(CASE WHEN superhero.eye_colour_id = 1 THEN 1 ELSE 0 END)) AS difference FROM      superhero WHERE      (superhero.weight_kg = 0 OR superhero.weight_kg IS NULL);\t----- bird -----\tsuperhero",
    "293": "SELECT COUNT(*) FROM superhero INNER JOIN colour ON superhero.skin_colour_id = colour.id INNER JOIN alignment ON superhero.alignment_id = alignment.id WHERE colour.colour = 'Green' AND alignment.alignment = 'Bad';\t----- bird -----\tsuperhero",
    "294": "SELECT superhero.superhero_name FROM superhero INNER JOIN hero_power ON superhero.id = hero_power.hero_id INNER JOIN superpower ON hero_power.power_id = superpower.id WHERE superpower.power_name = 'Wind Control' ORDER BY superhero.superhero_name ASC;\t----- bird -----\tsuperhero",
    "295": "SELECT gender.gender FROM hero_power INNER JOIN superpower ON hero_power.power_id = superpower.id INNER JOIN superhero ON hero_power.hero_id = superhero.id INNER JOIN gender ON superhero.gender_id = gender.id WHERE superpower.power_name = 'Phoenix Force';\t----- bird -----\tsuperhero",
    "296": "SELECT      (dc_count - marvel_count) AS difference FROM (     SELECT          (SELECT COUNT(*)           FROM superhero           INNER JOIN publisher ON superhero.publisher_id = publisher.id           WHERE publisher.publisher_name = 'DC Comics') AS dc_count,         (SELECT COUNT(*)           FROM superhero           INNER JOIN publisher ON superhero.publisher_id = publisher.id           WHERE publisher.publisher_name = 'Marvel Comics') AS marvel_count ) AS counts;\t----- bird -----\tsuperhero",
    "297": "SELECT DisplayName FROM users WHERE DisplayName IN ('Harlan', 'Jarrod Dixon') ORDER BY Reputation DESC LIMIT 1;\t----- bird -----\tcodebase_community",
    "298": "SELECT users.DisplayName FROM users WHERE strftime('%Y', users.CreationDate) = '2011';\t----- bird -----\tcodebase_community",
    "299": "SELECT COUNT(*) FROM users WHERE LastAccessDate > '2014-09-01';\t----- bird -----\tcodebase_community",
    "300": "SELECT users.DisplayName FROM posts INNER JOIN users ON posts.OwnerUserId = users.Id WHERE posts.Title = 'Eliciting priors from experts';\t----- bird -----\tcodebase_community",
    "301": "SELECT COUNT(posts.Id) FROM users INNER JOIN posts ON users.Id = posts.OwnerUserId WHERE users.DisplayName = 'csgillespie';\t----- bird -----\tcodebase_community",
    "302": "SELECT users.DisplayName FROM posts INNER JOIN users ON posts.LastEditorUserId = users.Id WHERE posts.Title = 'Examples for teaching: Correlation does not mean causation'\t----- bird -----\tcodebase_community",
    "303": "SELECT COUNT(*) FROM posts INNER JOIN users ON posts.OwnerUserId = users.Id WHERE users.Age > 65 AND posts.Score >= 20;\t----- bird -----\tcodebase_community",
    "304": "SELECT posts.Body FROM posts INNER JOIN tags ON posts.Id = tags.ExcerptPostId WHERE tags.TagName = 'bayesian';\t----- bird -----\tcodebase_community",
    "305": "SELECT AVG(posts.Score) FROM users INNER JOIN posts ON users.Id = posts.OwnerUserId WHERE users.DisplayName = 'csgillespie';\t----- bird -----\tcodebase_community",
    "306": "SELECT      (CAST(COUNT(CASE WHEN users.Age > 65 THEN posts.Id END) AS REAL) * 100.0 / COUNT(posts.Id)) AS percentage_elder_owned FROM      posts INNER JOIN      users ON posts.OwnerUserId = users.Id WHERE      posts.Score > 5;\t----- bird -----\tcodebase_community",
    "307": "SELECT posts.FavoriteCount FROM comments INNER JOIN posts ON comments.PostId = posts.Id WHERE comments.UserId = 3025   AND comments.CreationDate = '2014-04-23 20:29:39.0';\t----- bird -----\tcodebase_community",
    "308": "SELECT      CASE          WHEN posts.ClosedDate IS NULL THEN 'No'          ELSE 'Yes'      END AS WellFinished FROM      comments INNER JOIN      posts ON comments.PostId = posts.Id WHERE      comments.UserId = '23853'      AND comments.CreationDate = '2013-07-12 09:08:18.0';\t----- bird -----\tcodebase_community",
    "309": "SELECT COUNT(posts.Id)  FROM users  INNER JOIN posts ON users.Id = posts.OwnerUserId  WHERE users.DisplayName = 'Tiago Pasqualini';\t----- bird -----\tcodebase_community",
    "310": "SELECT users.DisplayName FROM users INNER JOIN votes ON users.Id = votes.UserId WHERE votes.Id = 6347;\t----- bird -----\tcodebase_community",
    "311": "SELECT CAST(COUNT(posts.Id) AS REAL) / COUNT(votes.Id) AS post_to_vote_ratio FROM posts LEFT JOIN votes ON posts.OwnerUserId = votes.UserId WHERE posts.OwnerUserId = '24'\t----- bird -----\tcodebase_community",
    "312": "SELECT ViewCount FROM posts WHERE Title = 'Integration of Weka and/or RapidMiner into Informatica PowerCenter/Developer';\t----- bird -----\tcodebase_community",
    "313": "SELECT Text FROM comments WHERE Score = 17;\t----- bird -----\tcodebase_community",
    "314": "SELECT users.DisplayName FROM comments INNER JOIN users ON comments.UserId = users.Id WHERE comments.Text = 'thank you user93!'\t----- bird -----\tcodebase_community",
    "315": "SELECT users.DisplayName, users.Reputation FROM users INNER JOIN posts ON users.Id = posts.OwnerUserId WHERE posts.Title = 'Understanding what Dassault iSight is doing?';\t----- bird -----\tcodebase_community",
    "316": "SELECT users.DisplayName FROM posts INNER JOIN users ON posts.OwnerUserId = users.Id WHERE posts.Title = 'Open source tools for visualizing multi-dimensional data';\t----- bird -----\tcodebase_community",
    "317": "SELECT comments.Text FROM comments INNER JOIN posts ON comments.PostId = posts.Id INNER JOIN users ON posts.LastEditorUserId = users.Id WHERE posts.Title = 'Why square the difference instead of taking the absolute value in standard deviation?'\t----- bird -----\tcodebase_community",
    "318": "SELECT users.DisplayName FROM votes INNER JOIN posts ON votes.PostId = posts.Id INNER JOIN users ON votes.UserId = users.Id WHERE votes.BountyAmount = 50 AND posts.Title LIKE '%variance%'\t----- bird -----\tcodebase_community",
    "319": "SELECT p.Title, c.Text, AVG(p.ViewCount) AS AverageViewCount FROM posts p INNER JOIN comments c ON p.Id = c.PostId INNER JOIN tags t ON p.Id = t.ExcerptPostId WHERE t.TagName = 'humor' GROUP BY p.Id, p.Title, c.Text;\t----- bird -----\tcodebase_community",
    "320": "SELECT COUNT(DISTINCT badges.UserId) FROM badges GROUP BY badges.UserId HAVING COUNT(badges.Name) > 5;\t----- bird -----\tcodebase_community",
    "321": "SELECT DISTINCT users.DisplayName FROM postHistory INNER JOIN posts ON postHistory.PostId = posts.Id INNER JOIN users ON postHistory.UserId = users.Id WHERE posts.ViewCount >= 1000 GROUP BY postHistory.PostId, postHistory.UserId HAVING COUNT(postHistory.Id) = 1;\t----- bird -----\tcodebase_community",
    "322": "SELECT      ((COUNT(CASE WHEN YEAR(Date) = 2010 THEN 1 END) * 100.0 / COUNT(*)) -      (COUNT(CASE WHEN YEAR(Date) = 2011 THEN 1 END) * 100.0 / COUNT(*))) AS percentage_difference FROM      badges WHERE      Name = 'Student';\t----- bird -----\tcodebase_community",
    "323": "SELECT      SUM(users.UpVotes) / COUNT(users.Id) AS average_upvotes,     SUM(users.Age) / COUNT(users.Id) AS average_age FROM      users INNER JOIN      posts ON users.Id = posts.OwnerUserId GROUP BY      users.Id HAVING      COUNT(posts.OwnerUserId) > 10;\t----- bird -----\tcodebase_community",
    "324": "SELECT CAST(COUNT(CASE WHEN YEAR(CreationDate) = 2010 THEN Id END) AS REAL) / COUNT(CASE WHEN YEAR(CreationDate) = 2011 THEN Id END) AS vote_ratio FROM votes;\t----- bird -----\tcodebase_community",
    "325": "SELECT posts.Id FROM posts INNER JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'slashnick' ORDER BY posts.AnswerCount DESC LIMIT 1;\t----- bird -----\tcodebase_community",
    "326": "SELECT      CASE          WHEN SUM(p1.ViewCount) > SUM(p2.ViewCount) THEN 'Harvey Motulsky'         ELSE 'Noah Snyder'     END AS More_Popular FROM      posts p1 INNER JOIN      users u1 ON p1.OwnerUserId = u1.Id INNER JOIN      posts p2 ON p2.OwnerUserId = u1.Id INNER JOIN      users u2 ON p2.OwnerUserId = u2.Id WHERE      u1.DisplayName = 'Harvey Motulsky'      AND u2.DisplayName = 'Noah Snyder';\t----- bird -----\tcodebase_community",
    "327": "SELECT DISTINCT tags.TagName FROM users INNER JOIN posts ON users.Id = posts.OwnerUserId INNER JOIN tags ON posts.Id = tags.ExcerptPostId WHERE users.DisplayName = 'Mark Meckes' AND posts.CommentCount = 0;\t----- bird -----\tcodebase_community",
    "328": "SELECT      CAST(COUNT(DISTINCT p.Id) FILTER (WHERE t.TagName = 'r') AS REAL) * 100.0 / COUNT(DISTINCT p.Id) AS percentage FROM      posts p JOIN      users u ON p.OwnerUserId = u.Id JOIN      tags t ON t.ExcerptPostId = p.Id WHERE      u.DisplayName = 'Community';\t----- bird -----\tcodebase_community",
    "329": "SELECT      (SUM(p1.ViewCount) - SUM(p2.ViewCount)) AS ViewCountDifference FROM      posts p1 INNER JOIN      users u1 ON p1.OwnerUserId = u1.Id INNER JOIN      posts p2 ON p2.OwnerUserId = u1.Id INNER JOIN      users u2 ON p2.OwnerUserId = u2.Id WHERE      u1.DisplayName = 'Mornington' AND u2.DisplayName = 'Amos';\t----- bird -----\tcodebase_community",
    "330": "SELECT COUNT(postLinks.Id) / 12 AS average_monthly_links FROM postLinks INNER JOIN posts ON postLinks.PostId = posts.Id WHERE YEAR(postLinks.CreationDate) = 2010 AND posts.AnswerCount <= 2;\t----- bird -----\tcodebase_community",
    "331": "SELECT MIN(votes.CreationDate) AS FirstVoteDate FROM users INNER JOIN votes ON users.Id = votes.UserId WHERE users.DisplayName = 'chl';\t----- bird -----\tcodebase_community",
    "332": "SELECT u.DisplayName FROM badges b INNER JOIN users u ON b.UserId = u.Id WHERE b.Name = 'Autobiographer' ORDER BY b.Date ASC LIMIT 1;\t----- bird -----\tcodebase_community",
    "333": "SELECT COUNT(DISTINCT users.Id) FROM users INNER JOIN posts ON users.Id = posts.OwnerUserId WHERE users.Location LIKE '%United Kingdom%' AND posts.FavoriteCount >= 4;\t----- bird -----\tcodebase_community",
    "334": "SELECT posts.Id, posts.Title FROM posts INNER JOIN users ON posts.OwnerUserId = users.Id WHERE users.DisplayName = 'Harvey Motulsky' ORDER BY posts.ViewCount DESC LIMIT 1;\t----- bird -----\tcodebase_community",
    "335": "SELECT posts.Id, posts.OwnerDisplayName FROM posts WHERE strftime('%Y', posts.CreationDate) = '2010' ORDER BY posts.FavoriteCount DESC LIMIT 1;\t----- bird -----\tcodebase_community",
    "336": "SELECT      (CAST(COUNT(p.Id) AS REAL) * 100 / (SELECT COUNT(Id) FROM posts)) AS percentage FROM      posts p INNER JOIN      users u ON p.OwnerUserId = u.Id WHERE      u.Reputation > 1000      AND YEAR(u.CreationDate) = 2011;\t----- bird -----\tcodebase_community",
    "337": "SELECT p.ViewCount, u.DisplayName FROM posts p INNER JOIN users u ON p.LastEditorUserId = u.Id WHERE p.Title = 'Computer Game Datasets';\t----- bird -----\tcodebase_community",
    "338": "SELECT CommentCount FROM posts ORDER BY Score DESC LIMIT 1;\t----- bird -----\tcodebase_community",
    "339": "SELECT comments.Text, comments.UserDisplayName FROM comments INNER JOIN posts ON comments.PostId = posts.Id WHERE posts.Title = 'Analysing wind data with R' ORDER BY comments.CreationDate DESC LIMIT 10;\t----- bird -----\tcodebase_community",
    "340": "SELECT      CAST(COUNT(CASE WHEN posts.Score > 50 THEN 1 END) AS REAL) * 100 / COUNT(posts.Id) AS percentage FROM      posts INNER JOIN      users ON posts.OwnerUserId = users.Id WHERE      users.Reputation = (SELECT MAX(Reputation) FROM users)\t----- bird -----\tcodebase_community",
    "341": "SELECT tags.ExcerptPostId, tags.WikiPostId FROM tags WHERE tags.TagName = 'sample';\t----- bird -----\tcodebase_community",
    "342": "SELECT users.Reputation, users.UpVotes FROM users INNER JOIN comments ON users.Id = comments.UserId WHERE comments.Text = 'fine, you win :)';\t----- bird -----\tcodebase_community",
    "343": "SELECT comments.Text FROM posts INNER JOIN comments ON posts.Id = comments.PostId WHERE posts.ViewCount BETWEEN 100 AND 150 ORDER BY comments.Score DESC LIMIT 1;\t----- bird -----\tcodebase_community",
    "344": "SELECT COUNT(*) FROM posts INNER JOIN comments ON posts.Id = comments.PostId WHERE posts.CommentCount = 1 AND comments.Score = 0;\t----- bird -----\tcodebase_community",
    "345": "SELECT CAST(COUNT(DISTINCT users.Id) FILTER (WHERE users.UpVotes = 0) AS REAL) * 100 / COUNT(DISTINCT users.Id) AS percentage FROM comments INNER JOIN users ON comments.UserId = users.Id WHERE comments.Score BETWEEN 5 AND 10;\t----- bird -----\tcodebase_community",
    "346": "SELECT cards.name FROM cards WHERE cards.cardKingdomFoilId IS NOT NULL   AND cards.cardKingdomId IS NOT NULL;\t----- bird -----\tcard_games",
    "347": "SELECT cards.name FROM cards WHERE cards.borderColor = 'borderless'   AND cards.cardKingdomFoilId IS NULL   AND cards.cardKingdomId IS NOT NULL;\t----- bird -----\tcard_games",
    "348": "SELECT cards.name FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.rarity = 'mythic'   AND legalities.status = 'Banned'   AND legalities.format = 'gladiator';\t----- bird -----\tcard_games",
    "349": "SELECT legalities.status FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.types = 'Artifact'   AND cards.side IS NULL   AND legalities.format = 'vintage';\t----- bird -----\tcard_games",
    "350": "SELECT cards.id, cards.artist FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE (cards.power = '*' OR cards.power IS NULL)   AND legalities.format = 'commander'   AND legalities.status = 'Legal';\t----- bird -----\tcard_games",
    "351": "SELECT cards.id, rulings.text FROM cards INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE cards.artist = 'Stephen Daniele' AND cards.hasContentWarning = 1;\t----- bird -----\tcard_games",
    "352": "SELECT c.name, c.artist, c.isPromo FROM cards c INNER JOIN rulings r ON c.uuid = r.uuid GROUP BY c.uuid ORDER BY COUNT(r.uuid) DESC LIMIT 1;\t----- bird -----\tcard_games",
    "353": "SELECT (CAST(COUNT(*) AS REAL) * 100.0 / (SELECT COUNT(*) FROM cards)) AS percentage FROM foreign_data WHERE language = 'Chinese Simplified';\t----- bird -----\tcard_games",
    "354": "SELECT COUNT(*) FROM cards WHERE power = '*';\t----- bird -----\tcard_games",
    "355": "SELECT borderColor FROM cards WHERE name = 'Ancestor''s Chosen';\t----- bird -----\tcard_games",
    "356": "SELECT legalities.format FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.name = 'Benalish Knight';\t----- bird -----\tcard_games",
    "357": "SELECT (CAST(COUNT(*) FILTER (WHERE borderColor = 'borderless') AS REAL) * 100 / COUNT(*)) AS percentage FROM cards;\t----- bird -----\tcard_games",
    "358": "SELECT      (CAST(COUNT(fd.id) AS REAL) * 100 / COUNT(c.id)) AS percentage FROM      cards c INNER JOIN      foreign_data fd ON c.uuid = fd.uuid WHERE      c.isStorySpotlight = 1     AND fd.language = 'French';\t----- bird -----\tcard_games",
    "359": "SELECT COUNT(*) FROM cards WHERE originalType = 'Summon - Angel' AND subtypes != 'Angel';\t----- bird -----\tcard_games",
    "360": "SELECT cards.id FROM cards WHERE cards.duelDeck = 'a';\t----- bird -----\tcard_games",
    "361": "SELECT COUNT(*) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE legalities.status = 'Banned' AND cards.borderColor = 'white';\t----- bird -----\tcard_games",
    "362": "SELECT cards.id FROM cards INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE cards.originalType = 'Artifact'   AND cards.colors = 'B'   AND foreign_data.language IS NOT NULL;\t----- bird -----\tcard_games",
    "363": "SELECT cards.manaCost FROM cards WHERE cards.availability = 'mtgo,paper'   AND cards.frameVersion = '2003'   AND cards.borderColor = 'black'   AND cards.layout = 'normal';\t----- bird -----\tcard_games",
    "364": "SELECT      (CAST(COUNT(*) AS REAL) * 100 / (SELECT COUNT(*) FROM cards WHERE isStorySpotlight = 1)) AS percentage,     id FROM      cards WHERE      isStorySpotlight = 1      AND isTextless = 0;\t----- bird -----\tcard_games",
    "365": "SELECT COUNT(DISTINCT sets.code) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setCode WHERE sets.block = 'Commander' AND set_translations.language = 'Portuguese (Brazil)'\t----- bird -----\tcard_games",
    "366": "SELECT DISTINCT foreign_data.type FROM foreign_data WHERE foreign_data.language = 'German';\t----- bird -----\tcard_games",
    "367": "SELECT COUNT(*) FROM cards WHERE (power IS NULL OR power = '*') AND text LIKE '%triggered ability%'\t----- bird -----\tcard_games",
    "368": "SELECT COUNT(*) FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid INNER JOIN rulings ON cards.uuid = rulings.uuid WHERE legalities.format = 'premodern'   AND rulings.text = 'This is a triggered mana ability.'   AND cards.side IS NULL;\t----- bird -----\tcard_games",
    "369": "SELECT foreign_data.name FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE foreign_data.language = 'French'   AND cards.borderColor = 'black'   AND cards.layout = 'normal'   AND cards.type LIKE '%Creature%'   AND cards.artist = 'Matthew D. Wilson';\t----- bird -----\tcard_games",
    "370": "SELECT DISTINCT set_translations.language FROM sets INNER JOIN set_translations ON sets.code = set_translations.setCode WHERE sets.baseSetSize = 180 AND sets.block = 'Ravnica';\t----- bird -----\tcard_games",
    "371": "SELECT CAST(COUNT(*) AS REAL) * 100 / (SELECT COUNT(*) FROM cards  JOIN legalities ON cards.uuid = legalities.uuid  WHERE legalities.format = 'commander' AND legalities.status = 'Legal') AS percentage FROM cards  JOIN legalities ON cards.uuid = legalities.uuid  WHERE legalities.format = 'commander' AND legalities.status = 'Legal' AND cards.hasContentWarning = 0;\t----- bird -----\tcard_games",
    "372": "SELECT      CAST(COUNT(CASE WHEN foreign_data.language = 'French' THEN 1 END) AS REAL) * 100 / COUNT(*) AS percentage FROM      cards INNER JOIN      foreign_data ON cards.uuid = foreign_data.uuid WHERE      (cards.power IS NULL OR cards.power = '*')\t----- bird -----\tcard_games",
    "373": "SELECT language FROM foreign_data WHERE multiverseid = 149934;\t----- bird -----\tcard_games",
    "374": "SELECT (CAST(COUNT(*) AS REAL) * 100 / (SELECT COUNT(*) FROM cards WHERE isTextless = 1)) AS proportion FROM cards WHERE isTextless = 1 AND layout = 'normal';\t----- bird -----\tcard_games",
    "375": "SELECT DISTINCT set_translations.language FROM set_translations WHERE set_translations.setCode = 'ARC';\t----- bird -----\tcard_games",
    "376": "SELECT language FROM foreign_data WHERE name = 'A Pedra Fellwar';\t----- bird -----\tcard_games",
    "377": "SELECT cards.name FROM cards WHERE cards.name IN ('Serra Angel', 'Shrine Keeper') ORDER BY cards.convertedManaCost DESC LIMIT 1;\t----- bird -----\tcard_games",
    "378": "SELECT st.translation FROM cards c INNER JOIN set_translations st ON c.setCode = st.setCode WHERE c.name = 'Ancestor''s Chosen' AND st.language = 'Italian';\t----- bird -----\tcard_games",
    "379": "SELECT EXISTS (     SELECT 1     FROM cards     INNER JOIN set_translations ON cards.setCode = set_translations.setCode     WHERE cards.name = 'Ancestor''s Chosen' AND set_translations.language = 'Korean' )\t----- bird -----\tcard_games",
    "380": "SELECT COUNT(*) FROM cards INNER JOIN set_translations ON cards.setCode = set_translations.setCode WHERE set_translations.translation = 'Hauptset Zehnte Edition' AND cards.artist = 'Adam Rex';\t----- bird -----\tcard_games",
    "381": "SELECT set_translations.translation FROM sets INNER JOIN set_translations ON sets.code = set_translations.setCode WHERE sets.name = 'Eighth Edition' AND set_translations.language = 'Chinese Simplified';\t----- bird -----\tcard_games",
    "382": "SELECT DISTINCT sets.mtgoCode FROM cards INNER JOIN sets ON cards.setCode = sets.code WHERE cards.name = 'Angel of Mercy' AND sets.mtgoCode IS NOT NULL;\t----- bird -----\tcard_games",
    "383": "SELECT COUNT(DISTINCT sets.code) FROM sets INNER JOIN set_translations ON sets.code = set_translations.setCode WHERE sets.block = 'Ice Age'  AND set_translations.language = 'Italian'  AND set_translations.translation IS NOT NULL;\t----- bird -----\tcard_games",
    "384": "SELECT s.isForeignOnly FROM cards c INNER JOIN sets s ON c.setCode = s.code WHERE c.name = 'Adarkar Valkyrie';\t----- bird -----\tcard_games",
    "385": "SELECT COUNT(DISTINCT sets.id) FROM set_translations INNER JOIN sets ON set_translations.setCode = sets.code WHERE set_translations.language = 'Italian'   AND set_translations.translation IS NOT NULL   AND sets.baseSetSize < 100;\t----- bird -----\tcard_games",
    "386": "SELECT DISTINCT cards.artist FROM cards INNER JOIN sets ON cards.setCode = sets.code WHERE sets.name = 'Coldsnap' AND cards.artist IN ('Jeremy Jarvis', 'Aaron Miller', 'Chippy');\t----- bird -----\tcard_games",
    "387": "SELECT COUNT(*) FROM cards INNER JOIN sets ON cards.setCode = sets.code WHERE sets.name = 'Coldsnap'   AND cards.convertedManaCost > 5   AND (cards.power = '*' OR cards.power IS NULL);\t----- bird -----\tcard_games",
    "388": "SELECT foreign_data.flavorText FROM foreign_data INNER JOIN cards ON foreign_data.uuid = cards.uuid WHERE cards.name = 'Ancestor''s Chosen' AND foreign_data.language = 'Italian';\t----- bird -----\tcard_games",
    "389": "SELECT foreign_data.text FROM cards INNER JOIN sets ON cards.setCode = sets.code INNER JOIN foreign_data ON cards.uuid = foreign_data.uuid WHERE sets.name = 'Coldsnap' AND foreign_data.language = 'Italian';\t----- bird -----\tcard_games",
    "390": "SELECT fd.name FROM cards c INNER JOIN foreign_data fd ON c.uuid = fd.uuid WHERE c.setCode = 'Coldsnap' AND fd.language = 'Italian' ORDER BY c.convertedManaCost DESC LIMIT 1;\t----- bird -----\tcard_games",
    "391": "SELECT (CAST(COUNT(*) AS REAL) * 100 / (SELECT COUNT(*) FROM cards WHERE setCode = 'Coldsnap')) AS percentage FROM cards WHERE convertedManaCost = 7 AND setCode = 'Coldsnap';\t----- bird -----\tcard_games",
    "392": "SELECT (CAST(SUM(CASE WHEN cards.cardKingdomFoilId IS NOT NULL AND cards.cardKingdomId IS NOT NULL THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*)) AS percentage_incredibly_powerful FROM cards INNER JOIN sets ON cards.setCode = sets.code WHERE sets.name = 'Coldsnap';\t----- bird -----\tcard_games",
    "393": "SELECT legalities.format, cards.name FROM legalities INNER JOIN cards ON legalities.uuid = cards.uuid WHERE legalities.status = 'Banned' GROUP BY legalities.format HAVING COUNT(legalities.status) = (     SELECT MAX(banned_count)     FROM (         SELECT COUNT(legalities.status) AS banned_count         FROM legalities         WHERE legalities.status = 'Banned'         GROUP BY legalities.format     ) AS subquery )\t----- bird -----\tcard_games",
    "394": "SELECT cards.name, legalities.format FROM cards INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE cards.edhrecRank = 1 AND legalities.status = 'Banned';\t----- bird -----\tcard_games",
    "395": "SELECT cards.name, legalities.format FROM cards INNER JOIN sets ON cards.setCode = sets.code INNER JOIN legalities ON cards.uuid = legalities.uuid WHERE sets.name = 'Hour of Devastation' AND legalities.status = 'Legal';\t----- bird -----\tcard_games",
    "396": "SELECT DISTINCT sets.name FROM sets INNER JOIN set_translations ON sets.code = set_translations.setCode WHERE set_translations.language = 'Korean' AND sets.code NOT IN (     SELECT set_translations.setCode     FROM set_translations     WHERE set_translations.language = 'Japanese' );\t----- bird -----\tcard_games",
    "397": "SELECT DISTINCT c.frameVersion, c.name FROM cards c WHERE c.artist = 'Allen Williams'  UNION  SELECT DISTINCT c.name FROM cards c INNER JOIN legalities l ON c.uuid = l.uuid WHERE l.status = 'Banned';\t----- bird -----\tcard_games",
    "398": "SELECT bond_type FROM bond GROUP BY bond_type ORDER BY COUNT(bond_type) DESC LIMIT 1;\t----- bird -----\ttoxicology",
    "399": "SELECT AVG(oxygen_count)  FROM (     SELECT atom.molecule_id, COUNT(atom.atom_id) AS oxygen_count     FROM atom     INNER JOIN bond ON atom.molecule_id = bond.molecule_id     WHERE bond.bond_type = '-' AND atom.element = 'o'     GROUP BY atom.molecule_id ) AS oxygen_counts;\t----- bird -----\ttoxicology",
    "400": "SELECT AVG(single_bond_count) AS average_single_bonded_carcinogenic_molecules FROM (     SELECT COUNT(b.bond_id) AS single_bond_count     FROM bond b     INNER JOIN molecule m ON b.molecule_id = m.molecule_id     WHERE m.label = '+' AND b.bond_type = '-'     GROUP BY b.molecule_id ) AS subquery;\t----- bird -----\ttoxicology",
    "401": "SELECT DISTINCT bond.molecule_id FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = '#' AND molecule.label = '+'\t----- bird -----\ttoxicology",
    "402": "SELECT (CAST(COUNT(DISTINCT a.atom_id) AS REAL) * 100 / COUNT(DISTINCT a1.atom_id)) AS percentage_of_carbon FROM atom a INNER JOIN bond b ON a.molecule_id = b.molecule_id INNER JOIN atom a1 ON a1.molecule_id = b.molecule_id WHERE a.element = 'c' AND b.bond_type = '='\t----- bird -----\ttoxicology",
    "403": "SELECT DISTINCT atom.element FROM connected INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE connected.bond_id = 'TR004_8_9' UNION SELECT DISTINCT atom.element FROM connected INNER JOIN atom ON connected.atom_id2 = atom.atom_id WHERE connected.bond_id = 'TR004_8_9';\t----- bird -----\ttoxicology",
    "404": "SELECT DISTINCT atom.element FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE bond.bond_type = '='\t----- bird -----\ttoxicology",
    "405": "SELECT molecule.label FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE atom.element = 'h' GROUP BY molecule.label ORDER BY COUNT(molecule.label) DESC LIMIT 1;\t----- bird -----\ttoxicology",
    "406": "SELECT atom.element FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '-' GROUP BY atom.element ORDER BY COUNT(atom.element) ASC LIMIT 1;\t----- bird -----\ttoxicology",
    "407": "SELECT bond.bond_type FROM connected INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE (connected.atom_id = 'TR004_8' AND connected.atom_id2 = 'TR004_20')    OR (connected.atom_id = 'TR004_20' AND connected.atom_id2 = 'TR004_8');\t----- bird -----\ttoxicology",
    "408": "SELECT COUNT(DISTINCT a.atom_id)  FROM atom a JOIN connected c ON a.atom_id = c.atom_id JOIN bond b ON c.bond_id = b.bond_id WHERE a.element IN ('i', 's') AND b.bond_type = '-';\t----- bird -----\ttoxicology",
    "409": "SELECT      (COUNT(DISTINCT df1.molecule_id) - COUNT(DISTINCT df2.molecule_id)) * 100.0 / COUNT(DISTINCT df1.molecule_id) AS percentage FROM      molecule AS df1 LEFT JOIN      atom AS df2 ON df1.molecule_id = df2.molecule_id AND df2.element = 'f' WHERE      df1.label = '+'\t----- bird -----\ttoxicology",
    "410": "SELECT      (COUNT(DISTINCT b.molecule_id) * 100.0 / COUNT(DISTINCT b_all.molecule_id)) AS percent FROM      bond b JOIN      molecule m ON b.molecule_id = m.molecule_id JOIN      bond b_all ON b_all.molecule_id = m.molecule_id WHERE      b.bond_type = '#' AND m.label = '+'  This SQL query calculates the percentage of carcinogenic molecules that have triple type bonds. It first filters the bonds to only those that are triple type (`bond_type = '#'`) and then checks if the corresponding molecule is carcinogenic (`label = '+'`). The percentage is calculated by dividing the count of distinct carcinogenic molecules with triple bonds by the total count of distinct molecules with triple bonds, multiplied by 100.\t----- bird -----\ttoxicology",
    "411": "SELECT DISTINCT atom.element FROM atom WHERE atom.molecule_id = 'TR000' ORDER BY atom.element ASC LIMIT 3;\t----- bird -----\ttoxicology",
    "412": "SELECT ROUND(CAST(SUM(CASE WHEN bond_type = '=' THEN 1 ELSE 0 END) AS REAL) * 100.0 / COUNT(bond_id), 5) AS percent FROM bond WHERE molecule_id = 'TR008';\t----- bird -----\ttoxicology",
    "413": "SELECT ROUND(CAST(SUM(CASE WHEN molecule.label = '+' THEN 1 ELSE 0 END) AS REAL) * 100.0 / COUNT(molecule.molecule_id), 3) AS percent FROM molecule;\t----- bird -----\ttoxicology",
    "414": "SELECT ROUND(CAST(COUNT(*) AS REAL) * 100.0 / (SELECT COUNT(*) FROM atom WHERE molecule_id = 'TR206'), 4) AS percent FROM atom WHERE element = 'h' AND molecule_id = 'TR206';\t----- bird -----\ttoxicology",
    "415": "SELECT atom.element, molecule.label FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.molecule_id = 'TR060';\t----- bird -----\ttoxicology",
    "416": "SELECT b.bond_type, m.label FROM bond b INNER JOIN molecule m ON b.molecule_id = m.molecule_id WHERE b.molecule_id = 'TR010' GROUP BY b.bond_type ORDER BY COUNT(b.bond_type) DESC LIMIT 1;\t----- bird -----\ttoxicology",
    "417": "SELECT DISTINCT bond.molecule_id FROM bond INNER JOIN molecule ON bond.molecule_id = molecule.molecule_id WHERE bond.bond_type = '-' AND molecule.label = '-' ORDER BY bond.molecule_id ASC LIMIT 3;\t----- bird -----\ttoxicology",
    "418": "SELECT COUNT(*) FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE bond.molecule_id = 'TR009' AND (connected.atom_id = 'TR009_12' OR connected.atom_id2 = 'TR009_12');\t----- bird -----\ttoxicology",
    "419": "SELECT bond.bond_type, connected.atom_id, connected.atom_id2 FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE bond.bond_id = 'TR001_6_9';\t----- bird -----\ttoxicology",
    "420": "SELECT COUNT(*) FROM connected WHERE atom_id LIKE 'TR%_19' OR atom_id2 LIKE 'TR%_19';\t----- bird -----\ttoxicology",
    "421": "SELECT DISTINCT atom.element FROM atom WHERE atom.molecule_id = 'TR004';\t----- bird -----\ttoxicology",
    "422": "SELECT DISTINCT atom.molecule_id FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE SUBSTR(atom.atom_id, 7, 2) BETWEEN '21' AND '25' AND molecule.label = '+'\t----- bird -----\ttoxicology",
    "423": "SELECT DISTINCT c.bond_id FROM connected c INNER JOIN atom a1 ON c.atom_id = a1.atom_id INNER JOIN atom a2 ON c.atom_id2 = a2.atom_id WHERE a1.element = 'p' AND a2.element = 'n'    OR a1.element = 'n' AND a2.element = 'p';\t----- bird -----\ttoxicology",
    "424": "SELECT m.label FROM (     SELECT b.molecule_id     FROM bond b     WHERE b.bond_type = '='     GROUP BY b.molecule_id     ORDER BY COUNT(*) DESC     LIMIT 1 ) AS subquery INNER JOIN molecule m ON subquery.molecule_id = m.molecule_id;\t----- bird -----\ttoxicology",
    "425": "SELECT AVG(bond_count)  FROM (     SELECT COUNT(connected.bond_id) AS bond_count     FROM atom     INNER JOIN connected ON atom.atom_id = connected.atom_id     WHERE atom.element = 'i'     GROUP BY atom.atom_id ) AS subquery;\t----- bird -----\ttoxicology",
    "426": "SELECT DISTINCT atom.element FROM atom WHERE atom.atom_id NOT IN (SELECT connected.atom_id FROM connected);\t----- bird -----\ttoxicology",
    "427": "SELECT connected.atom_id FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id WHERE bond.molecule_id = 'TR041' AND bond.bond_type = '#'\t----- bird -----\ttoxicology",
    "428": "SELECT DISTINCT atom.element FROM connected INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE connected.bond_id = 'TR144_8_19' UNION SELECT DISTINCT atom.element FROM connected INNER JOIN atom ON connected.atom_id2 = atom.atom_id WHERE connected.bond_id = 'TR144_8_19';\t----- bird -----\ttoxicology",
    "429": "SELECT DISTINCT atom.element FROM bond INNER JOIN connected ON bond.bond_id = connected.bond_id INNER JOIN atom ON connected.atom_id = atom.atom_id WHERE bond.bond_type = '#';\t----- bird -----\ttoxicology",
    "430": "SELECT CAST(COUNT(CASE WHEN m.label = '+' THEN 1 END) * 100.0 / COUNT(b.bond_id) AS REAL) AS proportion FROM bond b INNER JOIN molecule m ON b.molecule_id = m.molecule_id WHERE b.bond_type = '-'\t----- bird -----\ttoxicology",
    "431": "SELECT COUNT(DISTINCT atom.atom_id) FROM atom INNER JOIN connected ON atom.atom_id = connected.atom_id INNER JOIN bond ON connected.bond_id = bond.bond_id WHERE bond.bond_type = '#' AND (atom.element = 'p' OR atom.element = 'br')\t----- bird -----\ttoxicology",
    "432": "SELECT (CAST(COUNT(DISTINCT a.atom_id) AS REAL) * 100 / COUNT(DISTINCT c.atom_id)) AS percent FROM atom a INNER JOIN connected c ON a.atom_id = c.atom_id INNER JOIN bond b ON c.bond_id = b.bond_id WHERE a.element = 'cl' AND b.bond_type = '-'\t----- bird -----\ttoxicology",
    "433": "SELECT DISTINCT a.element FROM connected c INNER JOIN atom a ON c.atom_id = a.atom_id OR c.atom_id2 = a.atom_id WHERE c.bond_id = 'TR001_10_11';\t----- bird -----\ttoxicology",
    "434": "SELECT (CAST(COUNT(*) AS REAL) * 100 / total_count) AS percentage FROM (     SELECT a.element, m.label, COUNT(*) OVER () AS total_count     FROM atom a     INNER JOIN molecule m ON a.molecule_id = m.molecule_id     WHERE m.label = '+' ) AS subquery WHERE element = 'cl';\t----- bird -----\ttoxicology",
    "435": "SELECT atom.element, COUNT(*) AS tally FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '+' AND SUBSTR(atom.atom_id, 7, 1) = '4' GROUP BY atom.element;\t----- bird -----\ttoxicology",
    "436": "SELECT      (SUM(CASE WHEN atom.element = 'h' THEN 1 ELSE 0 END) * 1.0 / COUNT(atom.element)) AS ratio,      molecule.label FROM      atom INNER JOIN      molecule ON atom.molecule_id = molecule.molecule_id WHERE      atom.molecule_id = 'TR006' GROUP BY      molecule.label;\t----- bird -----\ttoxicology",
    "437": "SELECT atom.molecule_id FROM atom INNER JOIN molecule ON atom.molecule_id = molecule.molecule_id WHERE molecule.label = '-' GROUP BY atom.molecule_id HAVING COUNT(atom.atom_id) > 5;\t----- bird -----\ttoxicology",
    "438": "SELECT COUNT(*) FROM satscores INNER JOIN schools ON satscores.cds = schools.CDSCode WHERE satscores.AvgScrMath > 400 AND schools.Virtual = 'F';\t----- bird -----\tcalifornia_schools",
    "439": "SELECT frpm.CDSCode FROM frpm WHERE (frpm.`Enrollment (K-12)` + frpm.`Enrollment (Ages 5-17)`) > 500;\t----- bird -----\tcalifornia_schools",
    "440": "SELECT MAX(frpm.`Percent (%) Eligible Free (Ages 5-17)`) FROM satscores INNER JOIN frpm ON satscores.cds = frpm.CDSCode WHERE (satscores.NumGE1500 / satscores.NumTstTakr) > 0.3;\t----- bird -----\tcalifornia_schools",
    "441": "SELECT schools.CharterNum FROM satscores INNER JOIN schools ON satscores.cds = schools.CDSCode WHERE satscores.AvgScrWrite > 499 AND schools.CharterNum IS NOT NULL ORDER BY satscores.AvgScrWrite DESC;\t----- bird -----\tcalifornia_schools",
    "442": "SELECT schools.School, schools.Street FROM frpm INNER JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE (frpm.`Enrollment (K-12)` - frpm.`Enrollment (Ages 5-17)`) > 30;\t----- bird -----\tcalifornia_schools",
    "443": "SELECT DISTINCT schools.School FROM frpm INNER JOIN satscores ON frpm.CDSCode = satscores.cds INNER JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE (frpm.`Free Meal Count (K-12)` / frpm.`Enrollment (K-12)`) > 0.1   AND satscores.NumGE1500 > 0;\t----- bird -----\tcalifornia_schools",
    "444": "SELECT schools.School, schools.FundingType FROM schools INNER JOIN satscores ON schools.CDSCode = satscores.cds WHERE schools.County = 'Riverside' GROUP BY schools.School HAVING AVG(satscores.AvgScrMath) > 400;\t----- bird -----\tcalifornia_schools",
    "445": "SELECT schools.School, schools.Street, schools.City, schools.State, schools.Zip FROM schools INNER JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE schools.EILName = 'High School'   AND schools.County = 'Monterey'   AND frpm.CDSCode > 800;\t----- bird -----\tcalifornia_schools",
    "446": "SELECT schools.School, satscores.AvgScrWrite, schools.Phone FROM schools INNER JOIN satscores ON schools.CDSCode = satscores.cds WHERE schools.OpenDate > '1991-12-31' OR schools.ClosedDate < '2000-01-01';\t----- bird -----\tcalifornia_schools",
    "447": "SELECT      schools.School,      schools.DOCType FROM      frpm INNER JOIN      schools ON frpm.CDSCode = schools.CDSCode WHERE      frpm.`Charter Funding Type` = 'Locally funded' GROUP BY      schools.School, schools.DOCType HAVING      AVG(frpm.`Enrollment (K-12)` - frpm.`Enrollment (Ages 5-17)`) > (         SELECT              AVG(frpm.`Enrollment (K-12)` - frpm.`Enrollment (Ages 5-17)`)         FROM              frpm         WHERE              frpm.`Charter Funding Type` = 'Locally funded'     )  This SQL query calculates the average difference between K-12 enrollment and 15-17 enrollment for locally funded schools and then lists the names and DOC types of schools where this difference is above the calculated average.\t----- bird -----\tcalifornia_schools",
    "448": "SELECT `Percent (%) Eligible Free (K-12)` FROM (     SELECT `Percent (%) Eligible Free (K-12)`     FROM frpm     ORDER BY `Enrollment (K-12)` DESC     LIMIT 11 ) AS subquery ORDER BY `Enrollment (K-12)` ASC LIMIT 2;\t----- bird -----\tcalifornia_schools",
    "449": "SELECT schools.School,         (frpm.`FRPM Count (K-12)` / frpm.`Enrollment (K-12)`) AS eligible_FRPM_rate FROM frpm INNER JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE schools.SOC = '66' ORDER BY frpm.`FRPM Count (K-12)` DESC LIMIT 5;\t----- bird -----\tcalifornia_schools",
    "450": "SELECT schools.Street, schools.City, schools.Zip, schools.State FROM satscores INNER JOIN schools ON satscores.cds = schools.CDSCode ORDER BY (satscores.NumGE1500 / satscores.NumTstTakr) ASC LIMIT 1;\t----- bird -----\tcalifornia_schools",
    "451": "SELECT      schools.AdmFName1, schools.AdmLName1,      schools.AdmFName2, schools.AdmLName2,      schools.AdmFName3, schools.AdmLName3 FROM      satscores INNER JOIN      schools ON satscores.cds = schools.CDSCode ORDER BY      satscores.NumGE1500 DESC LIMIT 1;\t----- bird -----\tcalifornia_schools",
    "452": "SELECT AVG(satscores.NumTstTakr) FROM satscores INNER JOIN schools ON satscores.cds = schools.CDSCode WHERE schools.County = 'Fresno' AND YEAR(schools.OpenDate) = 1980;\t----- bird -----\tcalifornia_schools",
    "453": "SELECT schools.Phone FROM satscores INNER JOIN schools ON satscores.cds = schools.CDSCode WHERE satscores.dname = 'Fresno Unified' ORDER BY satscores.AvgScrRead ASC LIMIT 1;\t----- bird -----\tcalifornia_schools",
    "454": "SELECT s.School FROM schools s INNER JOIN satscores ss ON s.CDSCode = ss.cds WHERE s.Virtual = 'F' AND s.School IN (     SELECT sub.School     FROM (         SELECT s2.School, ss2.cname, ss2.AvgScrRead,                ROW_NUMBER() OVER (PARTITION BY ss2.cname ORDER BY ss2.AvgScrRead DESC) as rn         FROM schools s2         INNER JOIN satscores ss2 ON s2.CDSCode = ss2.cds         WHERE s2.Virtual = 'F'     ) sub     WHERE sub.rn <= 5 );\t----- bird -----\tcalifornia_schools",
    "455": "SELECT schools.School, satscores.AvgScrWrite FROM schools INNER JOIN satscores ON schools.CDSCode = satscores.cds WHERE schools.AdmFName1 = 'Ricci' AND schools.AdmLName1 = 'Ulrich';\t----- bird -----\tcalifornia_schools",
    "456": "SELECT schools.School FROM schools INNER JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE schools.DOC = '31' ORDER BY frpm.`Enrollment (K-12)` DESC LIMIT 1;\t----- bird -----\tcalifornia_schools",
    "457": "SELECT COUNT(*) / 12 AS monthly_average FROM schools WHERE County = 'Alameda'   AND DOC = '52'   AND YEAR(OpenDate) = 1980;\t----- bird -----\tcalifornia_schools",
    "458": "SELECT      (SELECT COUNT(*)       FROM schools       WHERE County = 'Orange'         AND DOC = '54'         AND StatusType = 'Merged') /      (SELECT COUNT(*)       FROM schools       WHERE DOC = '52'         AND StatusType = 'Merged') AS ratio\t----- bird -----\tcalifornia_schools",
    "459": "SELECT schools.Street, schools.School FROM satscores INNER JOIN schools ON satscores.cds = schools.CDSCode ORDER BY satscores.AvgScrMath DESC LIMIT 1 OFFSET 6;\t----- bird -----\tcalifornia_schools",
    "460": "SELECT COUNT(*) FROM schools INNER JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE schools.County = 'Los Angeles'   AND schools.Charter = 0   AND (frpm.`Free Meal Count (K-12)` * 100 / frpm.`Enrollment (K-12)`) < 0.18\t----- bird -----\tcalifornia_schools",
    "461": "SELECT SUM(frpm.`Enrollment (Ages 5-17)`)  FROM frpm  INNER JOIN schools ON frpm.CDSCode = schools.CDSCode  WHERE schools.EdOpsCode = 'SSS'  AND schools.City = 'Fremont'  AND frpm.`Academic Year` = '2014-2015';\t----- bird -----\tcalifornia_schools",
    "462": "SELECT schools.School, frpm.`Percent (%) Eligible FRPM (Ages 5-17)` FROM schools INNER JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE schools.County = 'Los Angeles' AND schools.GSserved = 'K-9';\t----- bird -----\tcalifornia_schools",
    "463": "SELECT County, COUNT(School) AS school_count FROM schools WHERE County IN ('San Diego', 'Santa Barbara') AND Virtual = 'F' GROUP BY County ORDER BY school_count DESC LIMIT 1;\t----- bird -----\tcalifornia_schools",
    "464": "SELECT schools.GSoffered FROM schools ORDER BY ABS(schools.Longitude) DESC LIMIT 1\t----- bird -----\tcalifornia_schools",
    "465": "SELECT COUNT(*) AS count_multiple_provision FROM schools INNER JOIN frpm ON schools.CDSCode = frpm.CDSCode WHERE schools.Magnet = 1   AND schools.GSserved = 'K-8'   AND frpm.`NSLP Provision Status` = 'Multiple Provision Types';  SELECT schools.City, COUNT(schools.School) AS number_of_schools FROM schools WHERE schools.GSserved = 'K-8' GROUP BY schools.City;\t----- bird -----\tcalifornia_schools",
    "466": "SELECT frpm.`Percent (%) Eligible Free (K-12)`, frpm.`District Code` FROM frpm INNER JOIN schools ON frpm.CDSCode = schools.CDSCode WHERE schools.AdmFName1 = 'Alusine';\t----- bird -----\tcalifornia_schools",
    "467": "SELECT DISTINCT schools.AdmEmail1, schools.AdmEmail2 FROM schools WHERE schools.County = 'San Bernardino'   AND schools.City = 'San Bernardino City Unified'   AND schools.OpenDate BETWEEN '2009-01-01' AND '2010-12-31'   AND schools.SOC = '62'   AND schools.DOC = '54';\t----- bird -----\tcalifornia_schools",
    "468": "SELECT COUNT(*) FROM account INNER JOIN district ON account.district_id = district.district_id WHERE account.frequency = 'POPLATEK PO OBRATU' AND district.A3 = 'east Bohemia';\t----- bird -----\tfinancial",
    "469": "SELECT COUNT(DISTINCT client.district_id)  FROM client  INNER JOIN district ON client.district_id = district.district_id  WHERE client.gender = 'F'  AND district.A11 > 6000  AND district.A11 < 10000;\t----- bird -----\tfinancial",
    "470": "SELECT COUNT(*) FROM client INNER JOIN district ON client.district_id = district.district_id WHERE client.gender = 'M'   AND district.A3 = 'north Bohemia'   AND district.A11 > 8000;\t----- bird -----\tfinancial",
    "471": "SELECT      a.account_id,     (SELECT MAX(d.A11) FROM district d) - (SELECT MIN(d2.A11)                                             FROM client c2                                            INNER JOIN disp dp2 ON c2.client_id = dp2.client_id                                            INNER JOIN account a2 ON dp2.account_id = a2.account_id                                            INNER JOIN district d2 ON a2.district_id = d2.district_id                                            WHERE c2.gender = 'F'                                            ORDER BY c2.birth_date ASC, d2.A11 ASC                                            LIMIT 1) AS salary_gap FROM      client c INNER JOIN      disp dp ON c.client_id = dp.client_id INNER JOIN      account a ON dp.account_id = a.account_id INNER JOIN      district d ON a.district_id = d.district_id WHERE      c.gender = 'F' ORDER BY      c.birth_date ASC, d.A11 ASC LIMIT 1;\t----- bird -----\tfinancial",
    "472": "SELECT account.account_id FROM account INNER JOIN disp ON account.account_id = disp.account_id INNER JOIN client ON disp.client_id = client.client_id INNER JOIN district ON account.district_id = district.district_id ORDER BY client.birth_date DESC, district.A11 DESC LIMIT 1;\t----- bird -----\tfinancial",
    "473": "SELECT account.account_id FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE strftime('%Y', loan.date) = '1997'   AND loan.amount = (     SELECT MIN(loan.amount)     FROM loan     WHERE strftime('%Y', loan.date) = '1997'   )   AND account.frequency = 'POPLATEK TYDNE';\t----- bird -----\tfinancial",
    "474": "SELECT account.account_id FROM loan INNER JOIN account ON loan.account_id = account.account_id WHERE loan.duration > 12   AND strftime('%Y', account.date) = '1993' ORDER BY loan.amount DESC LIMIT 1;\t----- bird -----\tfinancial",
    "475": "SELECT COUNT(*) FROM account INNER JOIN disp ON account.account_id = disp.account_id INNER JOIN client ON disp.client_id = client.client_id INNER JOIN district ON account.district_id = district.district_id WHERE client.gender = 'F'   AND client.birth_date < '1950-01-01'   AND district.A2 = 'Sokolov';\t----- bird -----\tfinancial",
    "476": "SELECT district.A2 FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN account ON disp.account_id = account.account_id INNER JOIN district ON account.district_id = district.district_id WHERE client.gender = 'F'   AND client.birth_date = '1976-01-29';\t----- bird -----\tfinancial",
    "477": "SELECT      CAST(COUNT(CASE WHEN client.gender = 'M' THEN 1 END) AS REAL) * 100 / COUNT(client.client_id) AS male_percentage FROM      district INNER JOIN      client ON district.district_id = client.district_id WHERE      district.A3 = 'south Bohemia'     AND district.A4 = (         SELECT MAX(d2.A4)         FROM district d2         WHERE d2.A3 = 'south Bohemia'     )\t----- bird -----\tfinancial",
    "478": "SELECT      CAST((balance_end - balance_start) AS REAL) * 100 / balance_start AS increase_rate FROM (     SELECT          (SELECT SUM(trans.balance)           FROM trans           JOIN disp ON trans.account_id = disp.account_id           WHERE disp.client_id = (              SELECT disp.client_id               FROM loan               JOIN disp ON loan.account_id = disp.account_id               WHERE loan.date = '1993-07-05'               ORDER BY loan.date ASC               LIMIT 1          ) AND trans.date = '1998-12-27') AS balance_end,         (SELECT SUM(trans.balance)           FROM trans           JOIN disp ON trans.account_id = disp.account_id           WHERE disp.client_id = (              SELECT disp.client_id               FROM loan               JOIN disp ON loan.account_id = disp.account_id               WHERE loan.date = '1993-07-05'               ORDER BY loan.date ASC               LIMIT 1          ) AND trans.date = '1993-03-22') AS balance_start ) AS balances  This SQL query calculates the increase rate of the account balance for the client whose loan was first approved on 1993-07-05. It does this by finding the sum of balances on two specific dates and then computing the percentage increase.\t----- bird -----\tfinancial",
    "479": "SELECT (CAST(SUM(CASE WHEN loan.status = 'A' THEN loan.amount ELSE 0 END) AS REAL) * 100 / SUM(loan.amount)) AS percentage_fully_paid FROM loan;\t----- bird -----\tfinancial",
    "480": "SELECT      CAST(COUNT(CASE WHEN loan.status = 'C' THEN 1 END) AS REAL) * 100 / COUNT(*) AS percentage FROM      loan WHERE      loan.amount < 100000;\t----- bird -----\tfinancial",
    "481": "SELECT district.A2 AS district_name,         ((district.A13 - district.A12) / district.A12) * 100 AS unemployment_rate_increment_percentage FROM loan INNER JOIN account ON loan.account_id = account.account_id INNER JOIN district ON account.district_id = district.district_id WHERE loan.status = 'D';\t----- bird -----\tfinancial",
    "482": "SELECT district.A2 FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN account ON disp.account_id = account.account_id INNER JOIN district ON account.district_id = district.district_id WHERE client.gender = 'F' GROUP BY district.A2 ORDER BY COUNT(client.client_id) DESC LIMIT 9;\t----- bird -----\tfinancial",
    "483": "SELECT COUNT(*) FROM account INNER JOIN loan ON account.account_id = loan.account_id WHERE account.frequency = 'POPLATEK MESICNE'   AND loan.amount >= 250000   AND loan.date BETWEEN '1995-01-01' AND '1997-12-31';\t----- bird -----\tfinancial",
    "484": "SELECT COUNT(DISTINCT account.account_id) FROM loan INNER JOIN account ON loan.account_id = account.account_id WHERE loan.status IN ('C', 'D') AND account.district_id = 1;\t----- bird -----\tfinancial",
    "485": "SELECT COUNT(*) FROM client INNER JOIN district ON client.district_id = district.district_id WHERE client.gender = 'M' AND district.A15 = (     SELECT DISTINCT A15     FROM district     ORDER BY A15 DESC     LIMIT 1 OFFSET 1 );\t----- bird -----\tfinancial",
    "486": "SELECT district.A2 FROM trans INNER JOIN account ON trans.account_id = account.account_id INNER JOIN district ON account.district_id = district.district_id WHERE trans.type = 'VYDAJ'   AND trans.operation = 'VYBER'   AND trans.date LIKE '1996-01%' ORDER BY trans.amount DESC LIMIT 10;\t----- bird -----\tfinancial",
    "487": "SELECT COUNT(DISTINCT account.account_id) FROM loan INNER JOIN account ON loan.account_id = account.account_id WHERE loan.status IN ('C', 'D') AND account.district_id = 1;\t----- bird -----\tfinancial",
    "488": "SELECT COUNT(*) FROM client INNER JOIN district ON client.district_id = district.district_id WHERE client.gender = 'M' AND district.district_id = (     SELECT district_id     FROM district     ORDER BY A15 DESC     LIMIT 1 OFFSET 1 );\t----- bird -----\tfinancial",
    "489": "SELECT DISTINCT disp.client_id FROM trans INNER JOIN disp ON trans.account_id = disp.account_id WHERE trans.operation = 'VYBER KARTOU'   AND trans.amount < (SELECT AVG(amount) FROM trans WHERE trans.operation = 'VYBER KARTOU' AND strftime('%Y', trans.date) = '1998')   AND strftime('%Y', trans.date) = '1998';\t----- bird -----\tfinancial",
    "490": "SELECT DISTINCT disp.type FROM account INNER JOIN disp ON account.account_id = disp.account_id INNER JOIN district ON account.district_id = district.district_id LEFT JOIN loan ON account.account_id = loan.account_id WHERE disp.type = 'DISPONENT' AND loan.account_id IS NULL AND district.A11 > 8000 AND district.A11 <= 9000;\t----- bird -----\tfinancial",
    "491": "SELECT AVG(district.A15)  FROM district INNER JOIN account ON district.district_id = account.district_id WHERE district.A15 > 4000  AND account.date >= '1997-01-01';\t----- bird -----\tfinancial",
    "492": "SELECT trans.trans_id, trans.date, trans.amount FROM trans INNER JOIN disp ON trans.account_id = disp.account_id WHERE trans.operation = 'VYBER' AND disp.client_id = 3356;\t----- bird -----\tfinancial",
    "493": "SELECT CAST(COUNT(DISTINCT df5.client_id) AS REAL) * 100 / COUNT(DISTINCT df4.client_id) AS percentage_of_women FROM (     SELECT client.client_id     FROM district     INNER JOIN account ON district.district_id = account.district_id     INNER JOIN disp ON account.account_id = disp.account_id     INNER JOIN client ON disp.client_id = client.client_id     WHERE district.A11 > 10000 ) AS df4 INNER JOIN (     SELECT client.client_id     FROM district     INNER JOIN account ON district.district_id = account.district_id     INNER JOIN disp ON account.account_id = disp.account_id     INNER JOIN client ON disp.client_id = client.client_id     WHERE district.A11 > 10000 AND client.gender = 'F' ) AS df5 ON df4.client_id = df5.client_id;\t----- bird -----\tfinancial",
    "494": "SELECT      ((SUM(CASE WHEN strftime('%Y', loan.date) = '1997' THEN loan.amount ELSE 0 END) -        SUM(CASE WHEN strftime('%Y', loan.date) = '1996' THEN loan.amount ELSE 0 END)) * 100.0 /       SUM(CASE WHEN strftime('%Y', loan.date) = '1996' THEN loan.amount ELSE 0 END)) AS growth_rate FROM      loan INNER JOIN      disp ON loan.account_id = disp.account_id INNER JOIN      client ON disp.client_id = client.client_id WHERE      client.gender = 'M'     AND (strftime('%Y', loan.date) = '1996' OR strftime('%Y', loan.date) = '1997');\t----- bird -----\tfinancial",
    "495": "SELECT COUNT(*) AS statement_request_count FROM trans WHERE trans.account_id = 3 AND trans.k_symbol = 'SLUZBY';  SELECT trans.k_symbol FROM trans WHERE trans.amount = 3539;\t----- bird -----\tfinancial",
    "496": "SELECT (CAST(COUNT(DISTINCT df2.client_id) AS REAL) * 100 / COUNT(DISTINCT df1.client_id)) AS percentage_of_male_clients FROM (     SELECT disp.client_id     FROM account     INNER JOIN disp ON account.account_id = disp.account_id     INNER JOIN client ON disp.client_id = client.client_id     WHERE account.frequency = 'POPLATEK TYDNE' ) AS df1 INNER JOIN (     SELECT disp.client_id     FROM account     INNER JOIN disp ON account.account_id = disp.account_id     INNER JOIN client ON disp.client_id = client.client_id     WHERE account.frequency = 'POPLATEK TYDNE' AND client.gender = 'M' ) AS df2 ON df1.client_id = df2.client_id;\t----- bird -----\tfinancial",
    "497": "SELECT account.account_id FROM account INNER JOIN disp ON account.account_id = disp.account_id INNER JOIN client ON disp.client_id = client.client_id INNER JOIN district ON account.district_id = district.district_id WHERE client.gender = 'F' ORDER BY client.birth_date ASC, district.A11 ASC LIMIT 1;\t----- bird -----\tfinancial",
    "498": "SELECT AVG(loan.amount) AS average_loan_amount FROM loan INNER JOIN account ON loan.account_id = account.account_id WHERE loan.status IN ('C', 'D')    AND account.frequency = 'POPLATEK PO OBRATU';\t----- bird -----\tfinancial",
    "499": "SELECT client.client_id,         (strftime('%Y', 'now') - strftime('%Y', client.birth_date)) AS age FROM client INNER JOIN disp ON client.client_id = disp.client_id INNER JOIN card ON disp.disp_id = card.disp_id WHERE card.type = 'gold'    AND disp.type = 'OWNER';\t----- bird -----\tfinancial"
}